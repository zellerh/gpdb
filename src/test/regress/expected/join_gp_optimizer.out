-- Extra GPDB tests for joins.
-- Ignore "workfile compresssion is not supported by this build" (see
-- 'zlib' test):
--
-- start_matchignore
-- m/ERROR:  workfile compresssion is not supported by this build/
-- end_matchignore
--
-- test numeric hash join
--
set enable_hashjoin to on;
set enable_mergejoin to off;
set enable_nestloop to off;
create table nhtest (i numeric(10, 2)) distributed by (i);
insert into nhtest values(100000.22);
insert into nhtest values(300000.19);
explain select * from nhtest a join nhtest b using (i);
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..862.00 rows=1 width=9)
   ->  Hash Join  (cost=0.00..862.00 rows=1 width=9)
         Hash Cond: (nhtest.i = nhtest_1.i)
         ->  Seq Scan on nhtest  (cost=0.00..431.00 rows=1 width=9)
         ->  Hash  (cost=431.00..431.00 rows=1 width=9)
               ->  Seq Scan on nhtest nhtest_1  (cost=0.00..431.00 rows=1 width=9)
 Optimizer: Pivotal Optimizer (GPORCA) version 2.74.0
(7 rows)

select * from nhtest a join nhtest b using (i);
     i     
-----------
 100000.22
 300000.19
(2 rows)

create temp table l(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into l values (1), (1), (2);
select * from l l1 join l l2 on l1.a = l2.a left join l l3 on l1.a = l3.a and l1.a = 2 order by 1,2,3;
 a | a | a 
---+---+---
 1 | 1 |  
 1 | 1 |  
 1 | 1 |  
 1 | 1 |  
 2 | 2 | 2
(5 rows)

--
-- test hash join
--
create table hjtest (i int, j int) distributed by (i,j);
insert into hjtest values(3, 4);
select count(*) from hjtest a1, hjtest a2 where a2.i = least (a1.i,4) and a2.j = 4;
 count 
-------
     1
(1 row)

--
-- Test for correct behavior when there is a Merge Join on top of Materialize
-- on top of a Motion :
-- 1. Use FULL OUTER JOIN to induce a Merge Join
-- 2. Use a large tuple size to induce a Materialize
-- 3. Use gp_dist_random() to induce a Redistribute
--
set enable_hashjoin to off;
set enable_mergejoin to on;
set enable_nestloop to off;
DROP TABLE IF EXISTS alpha;
NOTICE:  table "alpha" does not exist, skipping
DROP TABLE IF EXISTS theta;
NOTICE:  table "theta" does not exist, skipping
CREATE TABLE alpha (i int, j int) distributed by (i);
CREATE TABLE theta (i int, j char(10000000)) distributed by (i);
INSERT INTO alpha values (1, 1), (2, 2);
INSERT INTO theta values (1, 'f'), (2, 'g');
SELECT *
FROM gp_dist_random('alpha') FULL OUTER JOIN gp_dist_random('theta')
  ON (alpha.i = theta.i)
WHERE (alpha.j IS NULL or theta.j IS NULL);
 i | j | i | j 
---+---+---+---
(0 rows)

reset enable_hashjoin;
reset enable_mergejoin;
reset enable_nestloop;
--
-- Predicate propagation over equality conditions
--
drop schema if exists pred;
NOTICE:  schema "pred" does not exist, skipping
create schema pred;
set search_path=pred;
create table t1 (x int, y int, z int) distributed by (y);
create table t2 (x int, y int, z int) distributed by (x);
insert into t1 select i, i, i from generate_series(1,100) i;
insert into t2 select * from t1;
analyze t1;
analyze t2;
--
-- infer over equalities
--
explain select count(*) from t1,t2 where t1.x = 100 and t1.x = t2.x;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.00..862.00 rows=1 width=8)
   ->  Hash Join  (cost=0.00..862.00 rows=1 width=1)
         Hash Cond: (t1.x = t2.x)
         ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=4)
               ->  Seq Scan on t1  (cost=0.00..431.00 rows=1 width=4)
                     Filter: (x = 100)
         ->  Hash  (cost=431.00..431.00 rows=1 width=4)
               ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.00 rows=1 width=4)
                     ->  Seq Scan on t2  (cost=0.00..431.00 rows=1 width=4)
                           Filter: (x = 100)
 Optimizer: Pivotal Optimizer (GPORCA) version 3.64.0
(11 rows)

select count(*) from t1,t2 where t1.x = 100 and t1.x = t2.x;
 count 
-------
     1
(1 row)

--
-- infer over >=
--
explain select * from t1,t2 where t1.x = 100 and t2.x >= t1.x;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..1324039.56 rows=34 width=24)
   ->  Nested Loop  (cost=0.00..1324039.56 rows=12 width=24)
         Join Filter: (t2.x >= t1.x)
         ->  Broadcast Motion 3:3  (slice2; segments: 3)  (cost=0.00..431.00 rows=1 width=12)
               ->  Seq Scan on t1  (cost=0.00..431.00 rows=1 width=12)
                     Filter: (x = 100)
         ->  Seq Scan on t2  (cost=0.00..431.00 rows=34 width=12)
 Settings:  optimizer=on
 Optimizer status: Pivotal Optimizer (GPORCA) version 2.39.2
(9 rows)

select * from t1,t2 where t1.x = 100 and t2.x >= t1.x;
  x  |  y  |  z  |  x  |  y  |  z  
-----+-----+-----+-----+-----+-----
 100 | 100 | 100 | 100 | 100 | 100
(1 row)

--
-- multiple inferences
--
set optimizer_segments=2;
explain select * from t1,t2 where t1.x = 100 and t1.x = t2.y and t1.x <= t2.x;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Hash Join  (cost=0.00..862.01 rows=1 width=24)
   Hash Cond: (t1.x = t2.y)
   Join Filter: (t1.x <= t2.x)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=12)
         ->  Seq Scan on t1  (cost=0.00..431.00 rows=1 width=12)
               Filter: (x = 100)
   ->  Hash  (cost=431.00..431.00 rows=1 width=12)
         ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.00 rows=1 width=12)
               ->  Seq Scan on t2  (cost=0.00..431.00 rows=1 width=12)
                     Filter: (y = 100)
 Optimizer: Pivotal Optimizer (GPORCA) version 3.64.0
(11 rows)

reset optimizer_segments;
select * from t1,t2 where t1.x = 100 and t1.x = t2.y and t1.x <= t2.x;
  x  |  y  |  z  |  x  |  y  |  z  
-----+-----+-----+-----+-----+-----
 100 | 100 | 100 | 100 | 100 | 100
(1 row)

--
-- MPP-18537: hash clause references a constant in outer child target list
--
create table hjn_test (i int, j int) distributed by (i,j);
insert into hjn_test values(3, 4);
create table int4_tbl (f1 int) distributed by (f1);
insert into int4_tbl values(123456), (-2147483647), (0), (-123456), (2147483647);
select count(*) from hjn_test, (select 3 as bar) foo where hjn_test.i = least (foo.bar,4) and hjn_test.j = 4;
 count 
-------
     1
(1 row)

select count(*) from hjn_test, (select 3 as bar) foo where hjn_test.i = least (foo.bar,(array[4])[1]) and hjn_test.j = (array[4])[1];
 count 
-------
     1
(1 row)

select count(*) from hjn_test, (select 3 as bar) foo where least (foo.bar,(array[4])[1]) = hjn_test.i and hjn_test.j = (array[4])[1];
 count 
-------
     1
(1 row)

select count(*) from hjn_test, (select 3 as bar) foo where hjn_test.i = least (foo.bar, least(4,10)) and hjn_test.j = least(4,10);
 count 
-------
     1
(1 row)

select * from int4_tbl a join int4_tbl b on (a.f1 = (select f1 from int4_tbl c where c.f1=b.f1));
     f1      |     f1      
-------------+-------------
  2147483647 |  2147483647
      123456 |      123456
 -2147483647 | -2147483647
           0 |           0
     -123456 |     -123456
(5 rows)

-- Same as the last query, but with a partitioned table (which requires a
-- Result node to do projection of the hash expression, as Append is not
-- projection-capable)
create table part4_tbl (f1 int4) partition by range (f1) (start(-1000000) end (1000000) every (1000000));
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'f1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
NOTICE:  CREATE TABLE will create partition "part4_tbl_1_prt_1" for table "part4_tbl"
NOTICE:  CREATE TABLE will create partition "part4_tbl_1_prt_2" for table "part4_tbl"
insert into part4_tbl values
       (-123457), (-123456), (-123455),
       (-1), (0), (1),
       (123455), (123456), (123457);
select * from part4_tbl a join part4_tbl b on (a.f1 = (select f1 from int4_tbl c where c.f1=b.f1));
   f1    |   f1    
---------+---------
       0 |       0
  123456 |  123456
 -123456 | -123456
(3 rows)

--
-- Test case where a Motion hash key is only needed for the redistribution,
-- and not returned in the final result set. There was a bug at one point where
-- tjoin.c1 was used as the hash key in a Motion node, but it was not added
-- to the sub-plans target list, causing a "variable not found in subplan
-- target list" error.
--
create table tjoin1(dk integer, id integer) distributed by (dk);
create table tjoin2(dk integer, id integer, t text) distributed by (dk);
create table tjoin3(dk integer, id integer, t text) distributed by (dk);
insert into tjoin1 values (1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3);
insert into tjoin2 values (1, 1, '1-1'), (1, 2, '1-2'), (2, 1, '2-1'), (2, 2, '2-2');
insert into tjoin3 values (1, 1, '1-1'), (2, 1, '2-1');
select tjoin1.id, tjoin2.t, tjoin3.t
from tjoin1
left outer join (tjoin2 left outer join tjoin3 on tjoin2.id=tjoin3.id) on tjoin1.id=tjoin3.id;
 id |  t  |  t  
----+-----+-----
  3 |     | 
  3 |     | 
  1 | 2-1 | 1-1
  1 | 2-1 | 2-1
  1 | 1-1 | 1-1
  1 | 1-1 | 2-1
  2 |     | 
  1 | 2-1 | 1-1
  1 | 2-1 | 2-1
  1 | 1-1 | 1-1
  1 | 1-1 | 2-1
  2 |     | 
(12 rows)

set enable_hashjoin to off;
set optimizer_enable_hashjoin = off;
select count(*) from hjn_test, (select 3 as bar) foo where hjn_test.i = least (foo.bar,4) and hjn_test.j = 4;
 count 
-------
     1
(1 row)

select count(*) from hjn_test, (select 3 as bar) foo where hjn_test.i = least (foo.bar,(array[4])[1]) and hjn_test.j = (array[4])[1];
 count 
-------
     1
(1 row)

select count(*) from hjn_test, (select 3 as bar) foo where least (foo.bar,(array[4])[1]) = hjn_test.i and hjn_test.j = (array[4])[1];
 count 
-------
     1
(1 row)

select count(*) from hjn_test, (select 3 as bar) foo where hjn_test.i = least (foo.bar, least(4,10)) and hjn_test.j = least(4,10);
 count 
-------
     1
(1 row)

select * from int4_tbl a join int4_tbl b on (a.f1 = (select f1 from int4_tbl c where c.f1=b.f1));
     f1      |     f1      
-------------+-------------
  2147483647 |  2147483647
      123456 |      123456
 -2147483647 | -2147483647
           0 |           0
     -123456 |     -123456
(5 rows)

reset enable_hashjoin;
reset optimizer_enable_hashjoin;
-- In case of Left Anti Semi Join, if the left rel is empty a dummy join
-- should be created
drop table if exists foo;
NOTICE:  table "foo" does not exist, skipping
drop table if exists bar;
NOTICE:  table "bar" does not exist, skipping
create table foo (a int, b int) distributed randomly;
create table bar (c int, d int) distributed randomly;
insert into foo select generate_series(1,10);
insert into bar select generate_series(1,10);
explain select a from foo where a<1 and a>1 and not exists (select c from bar where c=a);
                      QUERY PLAN                      
------------------------------------------------------
 Result  (cost=0.00..0.00 rows=0 width=4)
   One-Time Filter: false
 Optimizer: Pivotal Optimizer (GPORCA) version 3.83.0
(3 rows)

select a from foo where a<1 and a>1 and not exists (select c from bar where c=a);
 a 
---
(0 rows)

-- The merge join executor code doesn't support LASJ_NOTIN joins. Make sure
-- the planner doesn't create an invalid plan with them.
create index index_foo on foo (a);
create index index_bar on bar (c);
set enable_nestloop to off;
set enable_hashjoin to off;
set enable_mergejoin to on;
select * from foo where a not in (select c from bar where c <= 5);
 a  | b 
----+---
  7 |  
  6 |  
  8 |  
  9 |  
 10 |  
(5 rows)

set enable_nestloop to off;
set enable_hashjoin to on;
set enable_mergejoin to off;
create table dept
(
	id int,
	pid int,
	name char(40)
);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into dept values(3, 0, 'root');
insert into dept values(4, 3, '2<-1');
insert into dept values(5, 4, '3<-2<-1');
insert into dept values(6, 4, '4<-2<-1');
insert into dept values(7, 3, '5<-1');
insert into dept values(8, 7, '5<-1');
insert into dept select i, i % 6 + 3 from generate_series(9,50) as i;
insert into dept select i, 99 from generate_series(100,15000) as i;
ANALYZE dept;
-- Test rescannable hashjoin with spilling hashtable
set statement_mem='1000kB';
set gp_workfile_compression = off;
WITH RECURSIVE subdept(id, parent_department, name) AS
(
	-- non recursive term
	SELECT * FROM dept WHERE name = 'root'
	UNION ALL
	-- recursive term
	SELECT d.* FROM dept AS d, subdept AS sd
		WHERE d.pid = sd.id
)
SELECT count(*) FROM subdept;
 count 
-------
    48
(1 row)

-- Test rescannable hashjoin with spilling hashtable, with compression
set gp_workfile_compression = on;
WITH RECURSIVE subdept(id, parent_department, name) AS
(
	-- non recursive term
	SELECT * FROM dept WHERE name = 'root'
	UNION ALL
	-- recursive term
	SELECT d.* FROM dept AS d, subdept AS sd
		WHERE d.pid = sd.id
)
SELECT count(*) FROM subdept;
 count 
-------
    48
(1 row)

-- Test rescannable hashjoin with in-memory hashtable
reset statement_mem;
WITH RECURSIVE subdept(id, parent_department, name) AS
(
	-- non recursive term
	SELECT * FROM dept WHERE name = 'root'
	UNION ALL
	-- recursive term
	SELECT d.* FROM dept AS d, subdept AS sd
		WHERE d.pid = sd.id
)
SELECT count(*) FROM subdept;
 count 
-------
    48
(1 row)

-- MPP-29458
-- When we join on a clause with two different types. If one table distribute by one type, the query plan
-- will redistribute data on another type. But the has values of two types would not be equal. The data will
-- redistribute to wrong segments.
create table test_timestamp_t1 (id  numeric(10,0) ,field_dt date) distributed by (id);
create table test_timestamp_t2 (id numeric(10,0),field_tms timestamp without time zone) distributed by (id,field_tms);
insert into test_timestamp_t1 values(10 ,'2018-1-10');
insert into test_timestamp_t1 values(11 ,'2018-1-11');
insert into test_timestamp_t2 values(10 ,'2018-1-10'::timestamp);
insert into test_timestamp_t2 values(11 ,'2018-1-11'::timestamp);
-- Test nest loop redistribute keys
set enable_nestloop to on;
set enable_hashjoin to on;
set enable_mergejoin to on;
select count(*) from test_timestamp_t1 t1 ,test_timestamp_t2 t2 where T1.id = T2.id and T1.field_dt = t2.field_tms;
 count 
-------
     2
(1 row)

-- Test hash join redistribute keys
set enable_nestloop to off;
set enable_hashjoin to on;
set enable_mergejoin to on;
select count(*) from test_timestamp_t1 t1 ,test_timestamp_t2 t2 where T1.id = T2.id and T1.field_dt = t2.field_tms;
 count 
-------
     2
(1 row)

drop table test_timestamp_t1;
drop table test_timestamp_t2;
-- Test merge join redistribute keys
create table test_timestamp_t1 (id  numeric(10,0) ,field_dt date) distributed randomly;
create table test_timestamp_t2 (id numeric(10,0),field_tms timestamp without time zone) distributed by (field_tms);
insert into test_timestamp_t1 values(10 ,'2018-1-10');
insert into test_timestamp_t1 values(11 ,'2018-1-11');
insert into test_timestamp_t2 values(10 ,'2018-1-10'::timestamp);
insert into test_timestamp_t2 values(11 ,'2018-1-11'::timestamp);
select * from test_timestamp_t1 t1 full outer join test_timestamp_t2 t2 on T1.id = T2.id and T1.field_dt = t2.field_tms;
 id |  field_dt  | id |        field_tms         
----+------------+----+--------------------------
 10 | 01-10-2018 | 10 | Wed Jan 10 00:00:00 2018
 11 | 01-11-2018 | 11 | Thu Jan 11 00:00:00 2018
(2 rows)

-- test float type
set enable_nestloop to off;
set enable_hashjoin to on;
set enable_mergejoin to on;
create table test_float1(id int, data float4)  DISTRIBUTED BY (data);
create table test_float2(id int, data float8)  DISTRIBUTED BY (data);
insert into test_float1 values(1, 10), (2, 20);
insert into test_float2 values(3, 10), (4, 20);
select t1.id, t1.data, t2.id, t2.data from test_float1 t1, test_float2 t2 where t1.data = t2.data;
 id | data | id | data 
----+------+----+------
  2 |   20 |  4 |   20
  1 |   10 |  3 |   10
(2 rows)

-- test int type
create table test_int1(id int, data int4)  DISTRIBUTED BY (data);
create table test_int2(id int, data int8)  DISTRIBUTED BY (data);
insert into test_int1 values(1, 10), (2, 20);
insert into test_int2 values(3, 10), (4, 20);
select t1.id, t1.data, t2.id, t2.data from test_int1 t1, test_int2 t2 where t1.data = t2.data;
 id | data | id | data 
----+------+----+------
  1 |   10 |  3 |   10
  2 |   20 |  4 |   20
(2 rows)

-- Test to ensure that for full outer join on varchar columns, planner is successful in finding a sort operator in the catalog
create table input_table(a varchar(30), b varchar(30)) distributed by (a);
set enable_hashjoin = off;
explain (costs off) select X.a from input_table X full join (select a from input_table) Y ON X.a = Y.a;
                        QUERY PLAN                         
-----------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Merge Full Join
         Merge Cond: ((x.a)::text = (input_table.a)::text)
         ->  Sort
               Sort Key: x.a
               ->  Seq Scan on input_table x
         ->  Sort
               Sort Key: input_table.a
               ->  Seq Scan on input_table
 Optimizer: Postgres query optimizer
(10 rows)

-- Cleanup
reset enable_hashjoin;
set client_min_messages='warning'; -- silence drop-cascade NOTICEs
drop schema pred cascade;
reset search_path;
-- github issue 5370 cases
drop table if exists t5370;
NOTICE:  table "t5370" does not exist, skipping
drop table if exists t5370_2;
NOTICE:  table "t5370_2" does not exist, skipping
create table t5370(id int,name text) distributed by(id);
insert into t5370 select i,i from  generate_series(1,1000) i;
create table t5370_2 as select * from t5370 distributed by (id);
analyze t5370_2;
analyze t5370;
explain select * from t5370 a , t5370_2 b where a.name=b.name;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..862.25 rows=1000 width=14)
   ->  Hash Join  (cost=0.00..862.20 rows=334 width=14)
         Hash Cond: (t5370.name = t5370_2.name)
         ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..431.02 rows=334 width=7)
               Hash Key: t5370.name
               ->  Seq Scan on t5370  (cost=0.00..431.01 rows=334 width=7)
         ->  Hash  (cost=431.02..431.02 rows=334 width=7)
               ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..431.02 rows=334 width=7)
                     Hash Key: t5370_2.name
                     ->  Seq Scan on t5370_2  (cost=0.00..431.01 rows=334 width=7)
 Optimizer: Pivotal Optimizer (GPORCA) version 2.70.2
(11 rows)

drop table t5370;
drop table t5370_2;
-- github issue 6215 cases
-- When executing the following plan
-- ```
--  Gather Motion 1:1  (slice1; segments: 1)
--    ->  Merge Full Join
--         ->  Seq Scan on int4_tbl a
--         ->  Seq Scan on int4_tbl b
--```
-- Greenplum will raise an Assert Fail.
-- We force adding a material node for
-- merge full join on true.
drop table if exists t6215;
create table t6215(f1 int4) distributed replicated;
insert into t6215(f1) values (1), (2), (3);
set enable_material = off;
-- The plan still have Material operator
explain (costs off) select * from t6215 a full join t6215 b on true;
                QUERY PLAN                
------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Merge Full Join
         ->  Seq Scan on t6215 a
         ->  Materialize
               ->  Seq Scan on t6215 b
 Optimizer: Postgres query optimizer
(6 rows)

select * from t6215 a full join t6215 b on true;
 f1 | f1 
----+----
  1 |  1
  1 |  2
  1 |  3
  2 |  1
  2 |  2
  2 |  3
  3 |  1
  3 |  2
  3 |  3
(9 rows)

drop table t6215;
--
-- This tripped an assertion while deciding the locus for the joins.
-- The code was failing to handle join between SingleQE and Hash correctly,
-- when there were join order restricitions. (see
-- https://github.com/greenplum-db/gpdb/issues/6643
--
select a.f1, b.f1, t.thousand, t.tenthous from
  (select sum(f1) as f1 from int4_tbl i4b) b
   left outer join
     (select sum(f1)+1 as f1 from int4_tbl i4a) a ON a.f1 = b.f1
      left outer join
        tenk1 t ON b.f1 = t.thousand and (a.f1+b.f1+999) = t.tenthous;
 f1 | f1 | thousand | tenthous 
----+----+----------+----------
    |  0 |          |         
(1 row)

-- tests to ensure that join reordering of LOJs and inner joins produces the
-- correct join predicates & residual filters
drop table if exists t1, t2, t3;
CREATE TABLE t1 (a int, b int, c int);
CREATE TABLE t2 (a int, b int, c int);
CREATE TABLE t3 (a int, b int, c int);
INSERT INTO t1 SELECT i, i, i FROM generate_series(1, 1000) i;
INSERT INTO t2 SELECT i, i, i FROM generate_series(2, 1000) i; -- start from 2 so that one row from t1 doesn't match
INSERT INTO t3 VALUES (1, 2, 3), (NULL, 2, 2);
ANALYZE t1;
ANALYZE t2;
ANALYZE t3;
-- ensure plan has a filter over left outer join
explain (costs off) select * from t1 left join t2 on (t1.a = t2.a) join t3 on (t1.b = t3.b) where (t2.a IS NULL OR (t1.c = t3.c));
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Result
         Filter: ((t2.a IS NULL) OR (t1.c = t3.c))
         ->  Hash Left Join
               Hash Cond: (t1.a = t2.a)
               ->  Hash Join
                     Hash Cond: (t1.b = t3.b)
                     ->  Seq Scan on t1
                     ->  Hash
                           ->  Broadcast Motion 3:3  (slice2; segments: 3)
                                 ->  Seq Scan on t3
               ->  Hash
                     ->  Seq Scan on t2
 Optimizer: Pivotal Optimizer (GPORCA) version 3.23.0
(14 rows)

select * from t1 left join t2 on (t1.a = t2.a) join t3 on (t1.b = t3.b) where (t2.a IS NULL OR (t1.c = t3.c));
 a | b | c | a | b | c | a | b | c 
---+---+---+---+---+---+---+---+---
 2 | 2 | 2 | 2 | 2 | 2 |   | 2 | 2
(1 row)

-- ensure plan has two inner joins with the where clause & join predicates ANDed
explain (costs off) select * from t1 left join t2 on (t1.a = t2.a) join t3 on (t1.b = t3.b) where (t2.a = t3.a);
                            QUERY PLAN                            
------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Hash Join
         Hash Cond: (t2.a = t1.a)
         ->  Seq Scan on t2
         ->  Hash
               ->  Hash Join
                     Hash Cond: ((t1.b = t3.b) AND (t1.a = t3.a))
                     ->  Seq Scan on t1
                     ->  Hash
                           ->  Seq Scan on t3
 Optimizer: Pivotal Optimizer (GPORCA)
(11 rows)

select * from t1 left join t2 on (t1.a = t2.a) join t3 on (t1.b = t3.b) where (t2.a = t3.a);
 a | b | c | a | b | c | a | b | c 
---+---+---+---+---+---+---+---+---
(0 rows)

-- ensure plan has a filter over left outer join
explain (costs off) select * from t1 left join t2 on (t1.a = t2.a) join t3 on (t1.b = t3.b) where (t2.a is distinct from t3.a);
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Result
         Filter: (t2.a IS DISTINCT FROM t3.a)
         ->  Hash Left Join
               Hash Cond: (t1.a = t2.a)
               ->  Hash Join
                     Hash Cond: (t1.b = t3.b)
                     ->  Seq Scan on t1
                     ->  Hash
                           ->  Broadcast Motion 3:3  (slice2; segments: 3)
                                 ->  Seq Scan on t3
               ->  Hash
                     ->  Seq Scan on t2
 Optimizer: Pivotal Optimizer (GPORCA) version 3.23.0
(14 rows)

select * from t1 left join t2 on (t1.a = t2.a) join t3 on (t1.b = t3.b) where (t2.a is distinct from t3.a);
 a | b | c | a | b | c | a | b | c 
---+---+---+---+---+---+---+---+---
 2 | 2 | 2 | 2 | 2 | 2 | 1 | 2 | 3
 2 | 2 | 2 | 2 | 2 | 2 |   | 2 | 2
(2 rows)

-- ensure plan has a filter over left outer join
explain select * from t3 join (select t1.a t1a, t1.b t1b, t1.c t1c, t2.a t2a, t2.b t2b, t2.c t2c from t1 left join t2 on (t1.a = t2.a)) t on (t1a = t3.a) WHERE (t2a IS NULL OR (t1c = t3.a));
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..1293.22 rows=4 width=36)
   ->  Result  (cost=0.00..1293.22 rows=2 width=36)
         Filter: ((t2.a IS NULL) OR (t1.c = t3.a))
         ->  Hash Left Join  (cost=0.00..1293.22 rows=2 width=36)
               Hash Cond: (t1.a = t2.a)
               ->  Hash Join  (cost=0.00..862.08 rows=1 width=24)
                     Hash Cond: (t1.a = t3.a)
                     ->  Seq Scan on t1  (cost=0.00..431.01 rows=334 width=12)
                     ->  Hash  (cost=431.00..431.00 rows=1 width=12)
                           ->  Seq Scan on t3  (cost=0.00..431.00 rows=1 width=12)
               ->  Hash  (cost=431.01..431.01 rows=333 width=12)
                     ->  Seq Scan on t2  (cost=0.00..431.01 rows=333 width=12)
 Optimizer: Pivotal Optimizer (GPORCA) version 3.23.0
(13 rows)

select * from t3 join (select t1.a t1a, t1.b t1b, t1.c t1c, t2.a t2a, t2.b t2b, t2.c t2c from t1 left join t2 on (t1.a = t2.a)) t on (t1a = t3.a) WHERE (t2a IS NULL OR (t1c = t3.a));
 a | b | c | t1a | t1b | t1c | t2a | t2b | t2c 
---+---+---+-----+-----+-----+-----+-----+-----
 1 | 2 | 3 |   1 |   1 |   1 |     |     |    
(1 row)

-- ensure plan has a filter over left outer join
explain select * from (select t1.a t1a, t1.b t1b, t2.a t2a, t2.b t2b from t1 left join t2 on t1.a = t2.a) tt 
  join t3 on tt.t1b = t3.b 
  join (select t1.a t1a, t1.b t1b, t2.a t2a, t2.b t2b from t1 left join t2 on t1.a = t2.a) tt1 on tt1.t1b = t3.b 
  join t3 t3_1 on tt1.t1b = t3_1.b and (tt1.t2a is NULL OR tt1.t1b = t3.b);
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=0.00..2586.37 rows=7 width=56)
   Hash Cond: (t1.b = t3_1.b)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..1293.18 rows=3 width=28)
         ->  Hash Left Join  (cost=0.00..1293.18 rows=1 width=28)
               Hash Cond: (t1.a = t2.a)
               ->  Hash Join  (cost=0.00..862.07 rows=1 width=20)
                     Hash Cond: (t1.b = t3.b)
                     ->  Seq Scan on t1  (cost=0.00..431.01 rows=334 width=8)
                     ->  Hash  (cost=431.00..431.00 rows=2 width=12)
                           ->  Broadcast Motion 3:3  (slice2; segments: 3)  (cost=0.00..431.00 rows=2 width=12)
                                 ->  Seq Scan on t3  (cost=0.00..431.00 rows=1 width=12)
               ->  Hash  (cost=431.01..431.01 rows=333 width=8)
                     ->  Seq Scan on t2  (cost=0.00..431.01 rows=333 width=8)
   ->  Hash  (cost=1293.18..1293.18 rows=3 width=28)
         ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..1293.18 rows=3 width=28)
               ->  Result  (cost=0.00..1293.18 rows=1 width=28)
                     Filter: ((t2_1.a IS NULL) OR (t1_1.b = t3_1.b))
                     ->  Hash Left Join  (cost=0.00..1293.18 rows=1 width=28)
                           Hash Cond: (t1_1.a = t2_1.a)
                           ->  Hash Join  (cost=0.00..862.07 rows=1 width=20)
                                 Hash Cond: (t1_1.b = t3_1.b)
                                 ->  Seq Scan on t1 t1_1  (cost=0.00..431.01 rows=334 width=8)
                                 ->  Hash  (cost=431.00..431.00 rows=2 width=12)
                                       ->  Broadcast Motion 3:3  (slice4; segments: 3)  (cost=0.00..431.00 rows=2 width=12)
                                             ->  Seq Scan on t3 t3_1  (cost=0.00..431.00 rows=1 width=12)
                           ->  Hash  (cost=431.01..431.01 rows=333 width=8)
                                 ->  Seq Scan on t2 t2_1  (cost=0.00..431.01 rows=333 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(28 rows)

select * from (select t1.a t1a, t1.b t1b, t2.a t2a, t2.b t2b from t1 left join t2 on t1.a = t2.a) tt 
  join t3 on tt.t1b = t3.b 
  join (select t1.a t1a, t1.b t1b, t2.a t2a, t2.b t2b from t1 left join t2 on t1.a = t2.a) tt1 on tt1.t1b = t3.b 
  join t3 t3_1 on tt1.t1b = t3_1.b and (tt1.t2a is NULL OR tt1.t1b = t3.b);
 t1a | t1b | t2a | t2b | a | b | c | t1a | t1b | t2a | t2b | a | b | c 
-----+-----+-----+-----+---+---+---+-----+-----+-----+-----+---+---+---
   2 |   2 |   2 |   2 |   | 2 | 2 |   2 |   2 |   2 |   2 | 1 | 2 | 3
   2 |   2 |   2 |   2 |   | 2 | 2 |   2 |   2 |   2 |   2 |   | 2 | 2
   2 |   2 |   2 |   2 | 1 | 2 | 3 |   2 |   2 |   2 |   2 | 1 | 2 | 3
   2 |   2 |   2 |   2 | 1 | 2 | 3 |   2 |   2 |   2 |   2 |   | 2 | 2
(4 rows)

-- test different join order enumeration methods
set optimizer_join_order = query;
select * from t1 join t2 on t1.a = t2.a join t3 on t1.b = t3.b;
 a | b | c | a | b | c | a | b | c 
---+---+---+---+---+---+---+---+---
 2 | 2 | 2 | 2 | 2 | 2 | 1 | 2 | 3
 2 | 2 | 2 | 2 | 2 | 2 |   | 2 | 2
(2 rows)

set optimizer_join_order = greedy;
select * from t1 join t2 on t1.a = t2.a join t3 on t1.b = t3.b;
 a | b | c | a | b | c | a | b | c 
---+---+---+---+---+---+---+---+---
 2 | 2 | 2 | 2 | 2 | 2 | 1 | 2 | 3
 2 | 2 | 2 | 2 | 2 | 2 |   | 2 | 2
(2 rows)

set optimizer_join_order = exhaustive;
select * from t1 join t2 on t1.a = t2.a join t3 on t1.b = t3.b;
 a | b | c | a | b | c | a | b | c 
---+---+---+---+---+---+---+---+---
 2 | 2 | 2 | 2 | 2 | 2 |   | 2 | 2
 2 | 2 | 2 | 2 | 2 | 2 | 1 | 2 | 3
(2 rows)

set optimizer_join_order = exhaustive2;
select * from t1 join t2 on t1.a = t2.a join t3 on t1.b = t3.b;
 a | b | c | a | b | c | a | b | c 
---+---+---+---+---+---+---+---+---
 2 | 2 | 2 | 2 | 2 | 2 | 1 | 2 | 3
 2 | 2 | 2 | 2 | 2 | 2 |   | 2 | 2
(2 rows)

reset optimizer_join_order;
select * from t1 join t2 on t1.a = t2.a join t3 on t1.b = t3.b;
 a | b | c | a | b | c | a | b | c 
---+---+---+---+---+---+---+---+---
 2 | 2 | 2 | 2 | 2 | 2 | 1 | 2 | 3
 2 | 2 | 2 | 2 | 2 | 2 |   | 2 | 2
(2 rows)

drop table t1, t2, t3;
--
-- Test a bug that nestloop path previously can not generate motion above
-- index path, which sometimes is wrong (this test case is an example).
-- We now depend on parameterized path related variables to judge instead.
-- We conservatively disallow motion when there is parameter requirement
-- for either outer or inner at this moment though there could be room
-- for further improvement (e.g. referring subplan code to do broadcast
-- for base rel if needed, which needs much effort and does not seem to
-- be deserved given we will probably refactor related code for the lateral
-- support in the near future). For the query and guc settings below, Postgres
-- planner can not generate a plan.
set enable_nestloop = 1;
set enable_material = 0;
set enable_seqscan = 0;
set enable_bitmapscan = 0;
explain select tenk1.unique2 >= 0 from tenk1 left join tenk2 on true limit 1;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..1885517.36 rows=1 width=1)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..1885517.36 rows=1 width=1)
         ->  Limit  (cost=0.00..1885517.36 rows=1 width=1)
               ->  Nested Loop Left Join  (cost=0.00..1885484.02 rows=33336667 width=4)
                     Join Filter: true
                     ->  Seq Scan on tenk1  (cost=0.00..431.51 rows=3334 width=4)
                     ->  Materialize  (cost=0.00..431.70 rows=10000 width=1)
                           ->  Broadcast Motion 3:3  (slice2; segments: 3)  (cost=0.00..431.69 rows=10000 width=1)
                                 ->  Seq Scan on tenk2  (cost=0.00..431.50 rows=3334 width=1)
 Optimizer: Pivotal Optimizer (GPORCA) version 3.83.0
(10 rows)

select tenk1.unique2 >= 0 from tenk1 left join tenk2 on true limit 1;
 ?column? 
----------
 t
(1 row)

reset enable_nestloop;
reset enable_material;
reset enable_seqscan;
reset enable_bitmapscan;
-- Below test cases are for planner's cdbpath_motion_for_join, so we close
-- ORCA temporarily.
set optimizer = off;
-- test outer join for general locus
-- replicated table's locus is SegmentGeneral
create table trep_join_gp (c1 int, c2 int) distributed replicated;
-- hash distributed table's locus is Hash
create table thash_join_gp (c1 int, c2 int) distributed by (c1);
-- randomly distributed table's locus is Strewn
create table trand_join_gp (c1 int, c2 int) distributed randomly;
-- start_ignore
create extension if not exists gp_debug_numsegments;
select gp_debug_set_create_table_default_numsegments(1);
 gp_debug_set_create_table_default_numsegments 
-----------------------------------------------
 1
(1 row)

-- end_ignore
-- the following replicated table's numsegments is 1
create table trep1_join_gp (c1 int, c2 int) distributed replicated;
insert into trep_join_gp values (1, 1), (2, 2);
insert into thash_join_gp values (1, 1), (2, 2);
insert into trep1_join_gp values (1, 1), (2, 2);
analyze trep_join_gp;
analyze thash_join_gp;
analyze trep1_join_gp;
analyze trand_join_gp;
-- This test is to check that: general left join segmentGeneral --> segmentGeneral
-- And segmentGeneral join hash does not need motion.
explain select * from generate_series(1, 5) g left join trep_join_gp on g = trep_join_gp.c1 join thash_join_gp on true;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=10000000001.05..10000000057.06 rows=2000 width=20)
   ->  Hash Left Join  (cost=10000000001.05..10000000030.39 rows=667 width=20)
         Hash Cond: (g.g = trep_join_gp.c1)
         ->  Nested Loop  (cost=10000000000.00..10000000021.01 rows=667 width=12)
               ->  Seq Scan on thash_join_gp  (cost=0.00..1.01 rows=1 width=8)
               ->  Function Scan on generate_series g  (cost=0.00..10.00 rows=1000 width=4)
         ->  Hash  (cost=1.02..1.02 rows=2 width=8)
               ->  Seq Scan on trep_join_gp  (cost=0.00..1.02 rows=2 width=8)
 Optimizer: Postgres query optimizer
(9 rows)

select * from generate_series(1, 5) g left join trep_join_gp on g = trep_join_gp.c1 join thash_join_gp on true;
 g | c1 | c2 | c1 | c2 
---+----+----+----+----
 1 |  1 |  1 |  2 |  2
 2 |  2 |  2 |  2 |  2
 3 |    |    |  2 |  2
 4 |    |    |  2 |  2
 5 |    |    |  2 |  2
 1 |  1 |  1 |  1 |  1
 2 |  2 |  2 |  1 |  1
 3 |    |    |  1 |  1
 4 |    |    |  1 |  1
 5 |    |    |  1 |  1
(10 rows)

-- The following 4 tests are to check that general left join partition, we could redistribute the
-- general-locus relation when the filter condition is suitable. If we can redistributed
-- general-locus relation, we should not gather them to singleQE.
explain select * from generate_series(1, 5) g left join thash_join_gp on g = thash_join_gp.c1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=2.05..45.80 rows=1000 width=12)
   ->  Hash Left Join  (cost=2.05..45.80 rows=334 width=12)
         Hash Cond: (g.g = thash_join_gp.c1)
         ->  Redistribute Motion 1:3  (slice2; segments: 1)  (cost=0.00..30.00 rows=1000 width=4)
               Hash Key: g.g
               ->  Function Scan on generate_series g  (cost=0.00..10.00 rows=334 width=4)
         ->  Hash  (cost=2.02..2.02 rows=1 width=8)
               ->  Seq Scan on thash_join_gp  (cost=0.00..2.02 rows=1 width=8)
 Optimizer: Postgres query optimizer
(9 rows)

select * from generate_series(1, 5) g left join thash_join_gp on g = thash_join_gp.c1;
 g | c1 | c2 
---+----+----
 2 |  2 |  2
 3 |    |   
 4 |    |   
 5 |    |   
 1 |  1 |  1
(5 rows)

explain select * from generate_series(1, 5) g left join thash_join_gp on g = thash_join_gp.c2;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=2.09..45.84 rows=1000 width=12)
   ->  Hash Left Join  (cost=2.09..45.84 rows=334 width=12)
         Hash Cond: (g.g = thash_join_gp.c2)
         ->  Redistribute Motion 1:3  (slice2; segments: 1)  (cost=0.00..30.00 rows=1000 width=4)
               Hash Key: g.g
               ->  Function Scan on generate_series g  (cost=0.00..10.00 rows=334 width=4)
         ->  Hash  (cost=2.06..2.06 rows=1 width=8)
               ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..2.06 rows=1 width=8)
                     Hash Key: thash_join_gp.c2
                     ->  Seq Scan on thash_join_gp  (cost=0.00..2.02 rows=1 width=8)
 Optimizer: Postgres query optimizer
(11 rows)

select * from generate_series(1, 5) g left join thash_join_gp on g = thash_join_gp.c2;
 g | c1 | c2 
---+----+----
 2 |  2 |  2
 3 |    |   
 4 |    |   
 1 |  1 |  1
 5 |    |   
(5 rows)

explain select * from generate_series(1, 5) g left join trand_join_gp on g = trand_join_gp.c1;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=1.03..44.78 rows=1000 width=12)
   ->  Hash Left Join  (cost=1.03..44.78 rows=334 width=12)
         Hash Cond: (g.g = trand_join_gp.c1)
         ->  Redistribute Motion 1:3  (slice2; segments: 1)  (cost=0.00..30.00 rows=1000 width=4)
               Hash Key: g.g
               ->  Function Scan on generate_series g  (cost=0.00..10.00 rows=334 width=4)
         ->  Hash  (cost=1.02..1.02 rows=1 width=8)
               ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..1.02 rows=1 width=8)
                     Hash Key: trand_join_gp.c1
                     ->  Seq Scan on trand_join_gp  (cost=0.00..1.00 rows=1 width=8)
 Optimizer: Postgres query optimizer
(11 rows)

select * from generate_series(1, 5) g left join trand_join_gp on g = trand_join_gp.c1;
 g | c1 | c2 
---+----+----
 1 |    |   
 2 |    |   
 3 |    |   
 4 |    |   
 5 |    |   
(5 rows)

explain select * from generate_series(1, 5) g full join trand_join_gp on g = trand_join_gp.c1;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=1.03..44.78 rows=1000 width=12)
   ->  Hash Full Join  (cost=1.03..44.78 rows=334 width=12)
         Hash Cond: (g.g = trand_join_gp.c1)
         ->  Redistribute Motion 1:3  (slice2; segments: 1)  (cost=0.00..30.00 rows=1000 width=4)
               Hash Key: g.g
               ->  Function Scan on generate_series g  (cost=0.00..10.00 rows=334 width=4)
         ->  Hash  (cost=1.02..1.02 rows=1 width=8)
               ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..1.02 rows=1 width=8)
                     Hash Key: trand_join_gp.c1
                     ->  Seq Scan on trand_join_gp  (cost=0.00..1.00 rows=1 width=8)
 Optimizer: Postgres query optimizer
(11 rows)

select * from generate_series(1, 5) g full join trand_join_gp on g = trand_join_gp.c1;
 g | c1 | c2 
---+----+----
 1 |    |   
 2 |    |   
 3 |    |   
 4 |    |   
 5 |    |   
(5 rows)

-- The following 3 tests are to check that segmentGeneral left join partition
-- we could redistribute the segment general-locus relation when the filter condition
-- is suitable. If we can redistributed general-locus relation, we should not
-- gather them to singleQE.
explain select * from trep_join_gp left join thash_join_gp using (c1);
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=1.02..2.13 rows=3 width=12)
   ->  Hash Left Join  (cost=1.02..2.09 rows=1 width=12)
         Hash Cond: (trep_join_gp.c1 = thash_join_gp.c1)
         ->  Redistribute Motion 1:3  (slice2; segments: 1)  (cost=0.00..1.05 rows=1 width=8)
               Hash Key: trep_join_gp.c1
               ->  Seq Scan on trep_join_gp  (cost=0.00..1.02 rows=2 width=8)
         ->  Hash  (cost=1.01..1.01 rows=1 width=8)
               ->  Seq Scan on thash_join_gp  (cost=0.00..1.01 rows=1 width=8)
 Optimizer: Postgres query optimizer
(9 rows)

select * from trep_join_gp left join thash_join_gp using (c1);
 c1 | c2 | c2 
----+----+----
  1 |  1 |  1
  2 |  2 |  2
(2 rows)

explain select * from trep_join_gp left join trand_join_gp using (c1);
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=1.03..2.13 rows=4 width=12)
   ->  Hash Left Join  (cost=1.03..2.13 rows=2 width=12)
         Hash Cond: (trep_join_gp.c1 = trand_join_gp.c1)
         ->  Redistribute Motion 1:3  (slice2; segments: 1)  (cost=0.00..1.06 rows=2 width=8)
               Hash Key: trep_join_gp.c1
               ->  Seq Scan on trep_join_gp  (cost=0.00..1.02 rows=2 width=8)
         ->  Hash  (cost=1.02..1.02 rows=1 width=8)
               ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..1.02 rows=1 width=8)
                     Hash Key: trand_join_gp.c1
                     ->  Seq Scan on trand_join_gp  (cost=0.00..1.00 rows=1 width=8)
 Optimizer: Postgres query optimizer
(11 rows)

select * from trep_join_gp left join trand_join_gp using (c1);
 c1 | c2 | c2 
----+----+----
  2 |  2 |   
  1 |  1 |   
(2 rows)

explain select * from trep1_join_gp join thash_join_gp using (c1);
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=1.02..2.13 rows=3 width=12)
   ->  Hash Join  (cost=1.02..2.09 rows=1 width=12)
         Hash Cond: (trep1_join_gp.c1 = thash_join_gp.c1)
         ->  Redistribute Motion 1:3  (slice2; segments: 1)  (cost=0.00..1.05 rows=1 width=8)
               Hash Key: trep1_join_gp.c1
               ->  Seq Scan on trep1_join_gp  (cost=0.00..1.02 rows=2 width=8)
         ->  Hash  (cost=1.01..1.01 rows=1 width=8)
               ->  Seq Scan on thash_join_gp  (cost=0.00..1.01 rows=1 width=8)
 Optimizer: Postgres query optimizer
(9 rows)

select * from trep1_join_gp join thash_join_gp using (c1);
 c1 | c2 | c2 
----+----+----
  2 |  2 |  2
  1 |  1 |  1
(2 rows)

drop table trep_join_gp;
drop table thash_join_gp;
drop table trand_join_gp;
drop table trep1_join_gp;
select gp_debug_set_create_table_default_numsegments(3);
 gp_debug_set_create_table_default_numsegments 
-----------------------------------------------
 3
(1 row)

reset optimizer;
-- The following cases are to test planner join size estimation
-- so we need optimizer to be off.
-- When a partition table join other table using partition key,
-- planner should use root table's stat info instead of largest
-- partition's.
reset enable_hashjoin;
reset enable_mergejoin;
reset enable_nestloop;
create table t_joinsize_1 (c1 int, c2 int)
distributed by (c1)
partition by range (c2)
( start (0) end (5) every (1),
  default partition extra );
create table t_joinsize_2 (c1 int, c2 int)
distributed by (c1);
create table t_joinsize_3 (c int) distributed randomly;
insert into t_joinsize_1 select i, i%5 from generate_series(1, 200)i;
insert into t_joinsize_1 select 1, null from generate_series(1, 1000);
insert into t_joinsize_2 select i,i%5 from generate_series(1, 1000)i;
insert into t_joinsize_3 select * from generate_series(1, 100);
analyze t_joinsize_1;
analyze t_joinsize_2;
analyze t_joinsize_3;
-- the following query should not broadcast the join result of t_joinsize_1, t_joinsize_2.
explain select * from (t_joinsize_1 join t_joinsize_2 on t_joinsize_1.c2 = t_joinsize_2.c2) join t_joinsize_3 on t_joinsize_3.c = t_joinsize_1.c1;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=0.00..1300.54 rows=33168 width=20)
   Hash Cond: (t_joinsize_2.c2 = t_joinsize_1.c2)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.04 rows=1000 width=8)
         ->  Seq Scan on t_joinsize_2  (cost=0.00..431.01 rows=334 width=8)
   ->  Hash  (cost=862.13..862.13 rows=200 width=12)
         ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..862.13 rows=598 width=12)
               ->  Hash Join  (cost=0.00..862.10 rows=200 width=12)
                     Hash Cond: (t_joinsize_1.c1 = t_joinsize_3.c)
                     ->  Sequence  (cost=0.00..431.01 rows=400 width=8)
                           ->  Partition Selector for t_joinsize_1 (dynamic scan id: 1)  (cost=10.00..100.00 rows=34 width=4)
                                 Partitions selected: 6 (out of 6)
                           ->  Dynamic Seq Scan on t_joinsize_1 (dynamic scan id: 1)  (cost=0.00..431.01 rows=400 width=8)
                     ->  Hash  (cost=431.00..431.00 rows=34 width=4)
                           ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..431.00 rows=34 width=4)
                                 Hash Key: t_joinsize_3.c
                                 ->  Seq Scan on t_joinsize_3  (cost=0.00..431.00 rows=34 width=4)
 Optimizer: Pivotal Optimizer (GPORCA) version 3.70.0
(17 rows)

drop table t_joinsize_1;
drop table t_joinsize_2;
drop table t_joinsize_3;
-- test if subquery locus is general, then
-- we should keep it general
create table t_randomly_dist_table(c int) distributed randomly;
-- the following plan should not contain redistributed motion (for planner)
explain
select * from (
  select a from generate_series(1, 10)a
  union all
  select a from generate_series(1, 10)a
) t_subquery_general
join t_randomly_dist_table on t_subquery_general.a = t_randomly_dist_table.c;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.15 rows=1 width=8)
   ->  Hash Join  (cost=0.00..431.15 rows=1 width=8)
         Hash Cond: (generate_series.generate_series = t_randomly_dist_table.c)
         ->  Append  (cost=0.00..0.03 rows=667 width=4)
               ->  Result  (cost=0.00..0.01 rows=334 width=4)
                     ->  Function Scan on generate_series  (cost=0.00..0.00 rows=334 width=4)
               ->  Result  (cost=0.00..0.01 rows=334 width=4)
                     ->  Function Scan on generate_series generate_series_1  (cost=0.00..0.00 rows=334 width=4)
         ->  Hash  (cost=431.00..431.00 rows=1 width=4)
               ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..431.00 rows=1 width=4)
                     Hash Key: t_randomly_dist_table.c
                     ->  Seq Scan on t_randomly_dist_table  (cost=0.00..431.00 rows=1 width=4)
 Optimizer: Pivotal Optimizer (GPORCA) version 3.77.0
(13 rows)

drop table t_randomly_dist_table;
-- test lateral join inner plan contains limit
-- we cannot pass params across motion so we
-- can only generate a plan to gather all the
-- data to singleQE. Here we create a compound
-- data type as params to pass into inner plan.
-- By doing so, if we fail to pass correct params
-- into innerplan, it will throw error because
-- of nullpointer reference. If we only use int
-- type as params, the nullpointer reference error
-- may not happen because we parse null to integer 0.
create type mytype_for_lateral_test as (x int, y int);
create table t1_lateral_limit(a int, b int, c mytype_for_lateral_test);
create table t2_lateral_limit(a int, b int);
insert into t1_lateral_limit values (1, 1, '(1,1)');
insert into t1_lateral_limit values (1, 2, '(2,2)');
insert into t2_lateral_limit values (2, 2);
insert into t2_lateral_limit values (3, 3);
explain select * from t1_lateral_limit as t1 cross join lateral
(select ((c).x+t2.b) as n  from t2_lateral_limit as t2 order by n limit 1)s;
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=10000000001.06..10000000002.12 rows=4 width=41)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..1.03 rows=1 width=37)
         ->  Seq Scan on t1_lateral_limit t1  (cost=0.00..1.01 rows=1 width=37)
   ->  Materialize  (cost=1.06..1.08 rows=1 width=4)
         ->  Limit  (cost=1.06..1.06 rows=1 width=4)
               ->  Sort  (cost=1.06..1.06 rows=1 width=4)
                     Sort Key: (((t1.c).x + t2.b))
                     ->  Result  (cost=0.00..1.05 rows=1 width=4)
                           ->  Materialize  (cost=0.00..1.03 rows=1 width=4)
                                 ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..1.03 rows=1 width=4)
                                       ->  Seq Scan on t2_lateral_limit t2  (cost=0.00..1.01 rows=1 width=4)
 Optimizer: Postgres query optimizer
(12 rows)

select * from t1_lateral_limit as t1 cross join lateral
(select ((c).x+t2.b) as n  from t2_lateral_limit as t2 order by n limit 1)s;
 a | b |   c   | n 
---+---+-------+---
 1 | 1 | (1,1) | 3
 1 | 2 | (2,2) | 4
(2 rows)

-- Continue with the above cases, if the lateral subquery contains union all
-- and in some of its appendquerys contain limit, it may also lead to bad plan.
-- The best solution may be to walk the query to and do some static analysis
-- to find out which rel has to be gathered and materialized. But it is complicated
-- to do so and this seems less efficient. I believe in future we should do big
-- refactor to make greenplum support lateral well so now, let's just make sure
-- we will not panic.
explain (costs off) select * from t1_lateral_limit as t1 cross join lateral
((select ((c).x+t2.b) as n  from t2_lateral_limit as t2 order by n limit 1) union all select 1)s;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Nested Loop
   ->  Gather Motion 3:1  (slice1; segments: 3)
         ->  Seq Scan on t1_lateral_limit t1
   ->  Materialize
         ->  Append
               ->  Limit
                     ->  Sort
                           Sort Key: (((t1.c).x + t2.b))
                           ->  Result
                                 ->  Materialize
                                       ->  Gather Motion 3:1  (slice2; segments: 3)
                                             ->  Seq Scan on t2_lateral_limit t2
               ->  Result
 Optimizer: Postgres query optimizer
(14 rows)

select * from t1_lateral_limit as t1 cross join lateral
((select ((c).x+t2.b) as n  from t2_lateral_limit as t2 order by n limit 1) union all select 1)s;
 a | b |   c   | n 
---+---+-------+---
 1 | 1 | (1,1) | 3
 1 | 1 | (1,1) | 1
 1 | 2 | (2,2) | 4
 1 | 2 | (2,2) | 1
(4 rows)

-- test lateral subquery contains group by (group-by is another place that
-- may add motions in the subquery's plan).
explain select * from t1_lateral_limit t1 cross join lateral
(select (c).x+t2.a, sum(t2.a+t2.b) from t2_lateral_limit t2 group by (c).x+t2.a)x;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=10000000001.06..10000000002.12 rows=4 width=49)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..1.03 rows=1 width=37)
         ->  Seq Scan on t1_lateral_limit t1  (cost=0.00..1.01 rows=1 width=37)
   ->  Materialize  (cost=1.05..1.08 rows=1 width=12)
         ->  HashAggregate  (cost=1.05..1.07 rows=1 width=12)
               Group Key: ((t1.c).x + t2.a)
               ->  Result  (cost=0.00..1.05 rows=1 width=12)
                     ->  Materialize  (cost=0.00..1.03 rows=1 width=8)
                           ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..1.03 rows=1 width=8)
                                 ->  Seq Scan on t2_lateral_limit t2  (cost=0.00..1.01 rows=1 width=8)
 Optimizer: Postgres query optimizer
(11 rows)

select * from t1_lateral_limit t1 cross join lateral
(select (c).x+t2.a, sum(t2.a+t2.b) from t2_lateral_limit t2 group by (c).x+t2.a)x;
 a | b |   c   | ?column? | sum 
---+---+-------+----------+-----
 1 | 1 | (1,1) |        4 |   6
 1 | 1 | (1,1) |        3 |   4
 1 | 2 | (2,2) |        5 |   6
 1 | 2 | (2,2) |        4 |   4
(4 rows)

-- The following case is from Github Issue
-- https://github.com/greenplum-db/gpdb/issues/8860
-- It is the same issue as the above test suite.
create table t_mylog_issue_8860 (myid int, log_date timestamptz );
insert into  t_mylog_issue_8860 values (1,timestamptz '2000-01-02 03:04'),(1,timestamptz '2000-01-02 03:04'-'1 hour'::interval);
insert into  t_mylog_issue_8860 values (2,timestamptz '2000-01-02 03:04'),(2,timestamptz '2000-01-02 03:04'-'2 hour'::interval);
explain select ml1.myid, log_date as first_date, ml2.next_date from t_mylog_issue_8860 ml1
inner join lateral
(select myid, log_date as next_date
 from t_mylog_issue_8860 where myid = ml1.myid and log_date > ml1.log_date order by log_date asc limit 1) ml2
on true;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=10000000001.10..10000000002.20 rows=4 width=20)
   ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..1.06 rows=2 width=12)
         ->  Seq Scan on t_mylog_issue_8860 ml1  (cost=0.00..1.02 rows=1 width=12)
   ->  Materialize  (cost=1.10..1.12 rows=1 width=8)
         ->  Subquery Scan on ml2  (cost=1.10..1.11 rows=1 width=8)
               ->  Limit  (cost=1.10..1.10 rows=1 width=12)
                     ->  Sort  (cost=1.10..1.10 rows=2 width=12)
                           Sort Key: t_mylog_issue_8860.log_date
                           ->  Result  (cost=0.00..1.09 rows=2 width=12)
                                 Filter: ((t_mylog_issue_8860.log_date > ml1.log_date) AND (t_mylog_issue_8860.myid = ml1.myid))
                                 ->  Materialize  (cost=0.00..1.07 rows=2 width=12)
                                       ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..1.06 rows=2 width=12)
                                             ->  Seq Scan on t_mylog_issue_8860  (cost=0.00..1.02 rows=1 width=12)
 Optimizer: Postgres query optimizer
(15 rows)

select ml1.myid, log_date as first_date, ml2.next_date from t_mylog_issue_8860 ml1
inner join lateral
(select myid, log_date as next_date
 from t_mylog_issue_8860 where myid = ml1.myid and log_date > ml1.log_date order by log_date asc limit 1) ml2
on true;
 myid |          first_date          |          next_date           
------+------------------------------+------------------------------
    1 | Sun Jan 02 02:04:00 2000 PST | Sun Jan 02 03:04:00 2000 PST
    2 | Sun Jan 02 01:04:00 2000 PST | Sun Jan 02 03:04:00 2000 PST
(2 rows)

-- test prefetch join qual
-- we do not handle this correct
-- the only case we need to prefetch join qual is:
--   1. outer plan contains motion
--   2. the join qual contains subplan that contains motion
reset client_min_messages;
set Test_print_prefetch_joinqual = true;
-- prefetch join qual is only set correct for planner
set optimizer = off;
create table t1_test_pretch_join_qual(a int, b int, c int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table t2_test_pretch_join_qual(a int, b int, c int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- the following plan contains redistribute motion in both inner and outer plan
-- the join qual is t1.c > t2.c, it contains no motion, should not prefetch
explain (costs off) select * from t1_test_pretch_join_qual t1 join t2_test_pretch_join_qual t2
on t1.b = t2.b and t1.c > t2.c;
                            QUERY PLAN                            
------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Hash Join
         Hash Cond: (t1.b = t2.b)
         Join Filter: (t1.c > t2.c)
         ->  Redistribute Motion 3:3  (slice2; segments: 3)
               Hash Key: t1.b
               ->  Seq Scan on t1_test_pretch_join_qual t1
         ->  Hash
               ->  Redistribute Motion 3:3  (slice3; segments: 3)
                     Hash Key: t2.b
                     ->  Seq Scan on t2_test_pretch_join_qual t2
 Optimizer: Postgres query optimizer
(12 rows)

create table t3_test_pretch_join_qual(a int, b int, c int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- the following plan contains motion in both outer plan and join qual,
-- so we should prefetch join qual
explain (costs off) select * from t1_test_pretch_join_qual t1 join t2_test_pretch_join_qual t2
on t1.b = t2.b and t1.a > any (select sum(b) from t3_test_pretch_join_qual t3 where c > t2.a);
NOTICE:  prefetch join qual in slice 0 of plannode 1
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Hash Join
         Hash Cond: (t1.b = t2.b)
         Join Filter: (SubPlan 1)
         ->  Redistribute Motion 3:3  (slice2; segments: 3)
               Hash Key: t1.b
               ->  Seq Scan on t1_test_pretch_join_qual t1
         ->  Hash
               ->  Redistribute Motion 3:3  (slice3; segments: 3)
                     Hash Key: t2.b
                     ->  Seq Scan on t2_test_pretch_join_qual t2
         SubPlan 1
           ->  Aggregate
                 ->  Result
                       Filter: (t3.c > t2.a)
                       ->  Materialize
                             ->  Broadcast Motion 3:3  (slice4; segments: 3)
                                   ->  Seq Scan on t3_test_pretch_join_qual t3
 Optimizer: Postgres query optimizer
(19 rows)

reset Test_print_prefetch_joinqual;
reset optimizer;
-- Github Issue: https://github.com/greenplum-db/gpdb/issues/9733
-- Previously in the function bring_to_outer_query and
-- bring_to_singleQE it depends on the path->param_info field
-- to determine if the path contains outerParams. This is not
-- enought. The following case would SegFault before because
-- the indexpath's orderby clause contains outerParams.
create table gist_tbl_github9733 (b box, p point, c circle);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause, and no column type is suitable for a distribution key. Creating a NULL policy entry.
insert into gist_tbl_github9733
select box(point(0.05*i, 0.05*i), point(0.05*i, 0.05*i)),
       point(0.05*i, 0.05*i),
       circle(point(0.05*i, 0.05*i), 1.0)
from generate_series(0,10000) as i;
vacuum analyze gist_tbl_github9733;
create index gist_tbl_point_index_github9733 on gist_tbl_github9733 using gist (p);
set enable_seqscan=off;
set enable_bitmapscan=off;
explain (costs off)
select p from
  (values (box(point(0,0), point(0.5,0.5))),
          (box(point(0.5,0.5), point(0.75,0.75))),
          (box(point(0.8,0.8), point(1.0,1.0)))) as v(bb)
cross join lateral
  (select p from gist_tbl_github9733 where p <@ bb order by p <-> bb[0] limit 2) ss;
ERROR:  could not devise a query plan for the given query (pathnode.c:265)
reset enable_seqscan;
explain (costs off)
select p from
  (values (box(point(0,0), point(0.5,0.5))),
          (box(point(0.5,0.5), point(0.75,0.75))),
          (box(point(0.8,0.8), point(1.0,1.0)))) as v(bb)
cross join lateral
  (select p from gist_tbl_github9733 where p <@ bb order by p <-> bb[0] limit 2) ss;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Nested Loop
   ->  Values Scan on "*VALUES*"
   ->  Materialize
         ->  Subquery Scan on ss
               ->  Limit
                     ->  Sort
                           Sort Key: ((gist_tbl_github9733.p <-> ("*VALUES*".column1)[0]))
                           ->  Result
                                 Filter: (gist_tbl_github9733.p <@ "*VALUES*".column1)
                                 ->  Materialize
                                       ->  Gather Motion 3:1  (slice1; segments: 3)
                                             ->  Seq Scan on gist_tbl_github9733
 Optimizer: Postgres query optimizer
(13 rows)

select p from
  (values (box(point(0,0), point(0.5,0.5))),
          (box(point(0.5,0.5), point(0.75,0.75))),
          (box(point(0.8,0.8), point(1.0,1.0)))) as v(bb)
cross join lateral
  (select p from gist_tbl_github9733 where p <@ bb order by p <-> bb[0] limit 2) ss;
      p      
-------------
 (0.5,0.5)
 (0.45,0.45)
 (0.75,0.75)
 (0.7,0.7)
 (1,1)
 (0.95,0.95)
(6 rows)

reset enable_bitmapscan;
---
--- Test that GUC enable_hashagg takes effect for SEMI join
---
drop table if exists foo;
drop table if exists bar;
create table foo(a int) distributed by (a);
create table bar(b int) distributed by (b);
insert into foo select i from generate_series(1,10)i;
insert into bar select i from generate_series(1,1000)i;
analyze foo;
analyze bar;
set enable_hashagg to on;
explain (costs off)
select * from foo where exists (select 1 from bar where foo.a = bar.b);
                QUERY PLAN                
------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Hash Semi Join
         Hash Cond: (foo.a = bar.b)
         ->  Seq Scan on foo
         ->  Hash
               ->  Seq Scan on bar
 Optimizer: Pivotal Optimizer (GPORCA)
(7 rows)

select * from foo where exists (select 1 from bar where foo.a = bar.b);
 a  
----
 10
  9
  3
  7
  4
  5
  8
  1
  2
  6
(10 rows)

set enable_hashagg to off;
explain (costs off)
select * from foo where exists (select 1 from bar where foo.a = bar.b);
                QUERY PLAN                
------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Hash Semi Join
         Hash Cond: (foo.a = bar.b)
         ->  Seq Scan on foo
         ->  Hash
               ->  Seq Scan on bar
 Optimizer: Pivotal Optimizer (GPORCA)
(7 rows)

select * from foo where exists (select 1 from bar where foo.a = bar.b);
 a  
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
(10 rows)

reset enable_hashagg;
drop table foo;
drop table bar;
-- Fix github issue 10012
create table fix_param_a (i int, j int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table fix_param_b (i int UNIQUE, j int);
create table fix_param_c (i int, j int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into fix_param_a select i, i from generate_series(1,20)i;
insert into fix_param_b select i, i from generate_series(1,2000)i;
insert into fix_param_c select i, i from generate_series(1,2000)i;
analyze fix_param_a;
analyze fix_param_b;
analyze fix_param_c;
explain (costs off)
select * from fix_param_a left join fix_param_b on
	fix_param_a.i = fix_param_b.i and fix_param_b.j in
		(select j from fix_param_c where fix_param_b.i = fix_param_c.i)
	order by 1;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   Merge Key: fix_param_a.i
   ->  Sort
         Sort Key: fix_param_a.i
         ->  Hash Left Join
               Hash Cond: (fix_param_a.i = fix_param_b.i)
               ->  Seq Scan on fix_param_a
               ->  Hash
                     ->  Hash Semi Join
                           Hash Cond: ((fix_param_b.i = fix_param_c.i) AND (fix_param_b.j = fix_param_c.j))
                           ->  Seq Scan on fix_param_b
                           ->  Hash
                                 ->  Seq Scan on fix_param_c
 Optimizer: Pivotal Optimizer (GPORCA)
(14 rows)

select * from fix_param_a left join fix_param_b on
	fix_param_a.i = fix_param_b.i and fix_param_b.j in
		(select j from fix_param_c where fix_param_b.i = fix_param_c.i)
	order by 1;
 i  | j  | i  | j  
----+----+----+----
  1 |  1 |  1 |  1
  2 |  2 |  2 |  2
  3 |  3 |  3 |  3
  4 |  4 |  4 |  4
  5 |  5 |  5 |  5
  6 |  6 |  6 |  6
  7 |  7 |  7 |  7
  8 |  8 |  8 |  8
  9 |  9 |  9 |  9
 10 | 10 | 10 | 10
 11 | 11 | 11 | 11
 12 | 12 | 12 | 12
 13 | 13 | 13 | 13
 14 | 14 | 14 | 14
 15 | 15 | 15 | 15
 16 | 16 | 16 | 16
 17 | 17 | 17 | 17
 18 | 18 | 18 | 18
 19 | 19 | 19 | 19
 20 | 20 | 20 | 20
(20 rows)

-- Test targetlist contains placeholder var
-- When creating a redistributed motion with hash keys,
-- Greenplum planner will invoke `cdbpullup_findEclassInTargetList`.
-- The following test case contains non-strict function `coalesce`
-- in the subquery at nullable-side of outerjoin and thus will
-- have PlaceHolderVar in targetlist. The case is to test if
-- function `cdbpullup_findEclassInTargetList` handles PlaceHolderVar
-- correct.
-- See github issue: https://github.com/greenplum-db/gpdb/issues/10315
create table t_issue_10315 ( id1 int, id2 int );
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t_issue_10315 select i,i from generate_series(1, 2)i;
insert into t_issue_10315 select i,null from generate_series(1, 2)i;
insert into t_issue_10315 select null,i from generate_series(1, 2)i;
select *  from
( select coalesce( bq.id1 ) id1, coalesce ( bq.id2 ) id2
        from ( select r.id1, r.id2 from t_issue_10315 r group by r.id1, r.id2 ) bq  ) t
full join ( select r.id1, r.id2 from t_issue_10315 r group by r.id1, r.id2 ) bq_all
on t.id1 = bq_all.id1  and t.id2 = bq_all.id2
full join ( select r.id1, r.id2 from t_issue_10315 r group by r.id1, r.id2 ) tq_all
on (coalesce(t.id1) = tq_all.id1  and t.id2 = tq_all.id2) ;
 id1 | id2 | id1 | id2 | id1 | id2 
-----+-----+-----+-----+-----+-----
   2 |   2 |   2 |   2 |   2 |   2
   2 |     |     |     |     |    
     |   1 |     |     |     |    
     |   2 |     |     |     |    
     |     |     |   2 |     |    
     |     |     |   1 |     |    
     |     |   2 |     |     |    
     |     |   1 |     |     |    
     |     |     |     |     |   2
     |     |     |     |     |   1
     |     |     |     |   2 |    
   1 |   1 |   1 |   1 |   1 |   1
   1 |     |     |     |     |    
     |     |     |     |   1 |    
(14 rows)

drop table t_issue_10315;
