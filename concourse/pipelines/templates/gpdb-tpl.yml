## ======================================================================
{% set cs_walrep_suites = ['walrep_1',
                           'walrep_2'] %}
{% set cs_pg_twophase_suites = ['pg_twophase_01_10',
                                'pg_twophase_11_20',
                                'pg_twophase_21_30',
                                'pg_twophase_31_40',
                                'pg_twophase_41_49',
                                'switch_01_12'] %}
{% set cs_crash_recovery_suite = ['crash_recovery_schema_topology',
                                  'crash_recovery_04_10',
                                  'crash_recovery_11_20',
                                  'crash_recovery_21_30',
                                  'crash_recovery_31_42'] %}
{% set cs_filerep_end_to_end_suites = ['filerep_end_to_end_full_mirror',
                                'filerep_end_to_end_incr_mirror',
                                'filerep_end_to_end_full_primary',
                                'filerep_end_to_end_incr_primary'] %}
{% set MM_1_suites = ['gprecoverseg',
                      'gpcheckcat',
                      'gpinitstandby',
                      'gpactivatestandby'] %}
{% set MM_2_suites = ['analyzedb',
                      'reindexdb',
                      'gpperfmon',
                      'gpinitsystem'] %}
{% set aa_Test_suites = ['Planner_centos6',
                         'Orca_centos6',
                         'Planner_centos7',
                         'Orca_centos7'
                        ] %}
{% set postgis_build_platforms = ['centos6',
                         'centos7'
                        ] %}
## ======================================================================
##   __ _ _ __ ___  _   _ _ __  ___
##  / _` | '__/ _ \| | | | '_ \/ __|
## | (_| | | | (_) | |_| | |_) \__ \
##  \__, |_|  \___/ \__,_| .__/|___/
##  |___/                |_|
## ======================================================================

groups:
- name: 5X_STABLE
  jobs:
  ## --------------------------------------------------------------------
  - gate_compile_start
  - compile_gpdb_centos6
  - compile_gpdb_centos7
  - compile_gpdb_sles11
  - compile_gpdb_ubuntu16
  - compile_gpdb_ubuntu16_oss
  - compile_gpdb_ubuntu16_oss_abi
  - compile_gpdb_open_source_centos6
  - compile_gpdb_binary_swap_centos6
  - compile_gpdb_windows_cl
  - compile_gpdb_aix7_remote
  - client_loader_remote_test_aix
  - gate_compile_end
{% if "ICW" in test_sections %}
  ## --------------------------------------------------------------------
  - gate_icw_start
  - icw_planner_centos6
  - icw_planner_ictcp_centos6
  - icw_gporca_centos6
  - icw_planner_centos7
  - icw_gporca_centos7
  - icw_planner_oracle7
  - icw_gporca_oracle7
  - icw_gporca_sles11
  - icw_planner_ubuntu16
  - icw_planner_ubuntu16_oss
  - icw_gporca_ubuntu16
  - icw_gporca_ubuntu16_oss
  - icw_extensions_gpcloud
  - gate_icw_end
  - QP_memory-accounting
  - QP_optimizer-functional
{% endif %}
{% if "CS" in test_sections %}
  ## --------------------------------------------------------------------
  - gate_cs_start
  - fts
  - storage
{% for test_name in cs_walrep_suites +
                    cs_pg_twophase_suites +
                    cs_crash_recovery_suite %}
  - cs_[[ test_name ]]
{% endfor %}
  - gate_cs_end
{% endif %}
{% if "MPP" in test_sections %}
  ## --------------------------------------------------------------------
  - gate_mpp_start
  - mpp_interconnect
  - mpp_resource_group_centos6
  - mpp_resource_group_centos7
  - gate_mpp_end
{% endif %}
{% if "MM" in test_sections %}
  ## --------------------------------------------------------------------
  - gate_mm_start
{% for test_name in MM_1_suites +
                    MM_2_suites %}
  - MM_[[ test_name ]]
{% endfor %}
  - MM_gppkg
  - MM_gpcheck
  - MM_gpexpand
  - MM_gpaddmirrors
  - MM_pt-rebuild
  - MU_check_centos
  - gate_mm_end
{% endif %}
{% if "DPM" in test_sections %}
  ## --------------------------------------------------------------------
  - gate_dpm_start
  - DPM_backup-restore
  - DPM_backup-restore_ddboost_part1
  - DPM_backup-restore_ddboost_part2
  - DPM_backup-restore_ddboost_part3
  - DPM_backup-restore_netbackup_part1
  - DPM_backup-restore_netbackup_part2
  - DPM_backup-restore_netbackup_part3
  - DPM_backup_43_restore_5
  - gptransfer-43x-to-5x
  - gptransfer-5x-to-5x
  - gate_dpm_end
{% endif %}
{% if "UD" in test_sections %}
  ## --------------------------------------------------------------------
  - gate_ud_start
  - regression_tests_gphdfs_hadoop_centos
  - regression_tests_gphdfs_mapr_centos
  - gate_ud_end
{% endif %}
{% if "AA" in test_sections %}
  ## --------------------------------------------------------------------
  - gate_advanced_analytics_start
{% for platform in postgis_build_platforms %}
  - postgis_build_[[ platform ]]
{% endfor %}
{% for test_name in aa_Test_suites %}
{% set platform_version = '7' if "centos7" in test_name else '6' %}
{% set orca_state = 'off' if "Planner" in test_name else 'on' %}
  - MADlib_Test_[[ test_name ]]
  - Postgis_Test_[[ test_name ]]
{% endfor %}
  - gate_advanced_analytics_end

{% endif %}
{% if "FileRep" in test_sections %}
  ## --------------------------------------------------------------------
  - gate_filerep_start
{% for test_name in cs_filerep_end_to_end_suites %}
  - cs_[[ test_name ]]
{% endfor %}
  - gate_filerep_end
{% endif %}

{% if pipeline_type == "prod" %}
## ======================================================================

- name: Release
  jobs:
  - gate_release_candidate_start
  - compile_gpdb_ubuntu16_oss_abi
  - Release_Candidate

{% endif %}
## ======================================================================

- name: G:Compile
  jobs:
  - gate_compile_start
  - compile_gpdb_centos6
  - compile_gpdb_centos7
  - compile_gpdb_sles11
  - compile_gpdb_ubuntu16
  - compile_gpdb_ubuntu16_oss
  - compile_gpdb_open_source_centos6
  - compile_gpdb_binary_swap_centos6
  - compile_gpdb_windows_cl
  - compile_gpdb_aix7_remote
  - client_loader_remote_test_aix
  - gate_compile_end

{% if "ICW" in test_sections %}
## ======================================================================

- name: G:ICW
  jobs:
  - gate_icw_start
  - icw_planner_centos6
  - icw_gporca_centos6
  - icw_planner_ictcp_centos6
  - icw_planner_centos7
  - icw_gporca_centos7
  - icw_planner_oracle7
  - icw_gporca_oracle7
  - icw_gporca_sles11
  - icw_planner_ubuntu16
  - icw_planner_ubuntu16_oss
  - icw_gporca_ubuntu16
  - icw_gporca_ubuntu16_oss
  - icw_extensions_gpcloud
  - QP_memory-accounting
  - QP_optimizer-functional
  - gate_icw_end

{% endif %}
{% if "CS" in test_sections %}
## ======================================================================

- name: G:CS
  jobs:
  - gate_cs_start
{% for test_name in cs_walrep_suites +
                    cs_pg_twophase_suites +
                    cs_crash_recovery_suite %}
  - cs_[[ test_name ]]
{% endfor %}
  - fts
  - storage
  - gate_cs_end

{% endif %}
{% if "MPP" in test_sections %}
## ======================================================================

- name: G:MPP
  jobs:
  - gate_mpp_start
  - mpp_interconnect
  - mpp_resource_group_centos6
  - mpp_resource_group_centos7
  - gate_mpp_end

{% endif %}
{% if "MM" in test_sections %}
## ======================================================================

- name: G:MM
  jobs:
  - gate_mm_start
{% for test_name in MM_1_suites +
                    MM_2_suites %}
  - MM_[[ test_name ]]
{% endfor %}
  - MM_gppkg
  - MM_gpcheck
  - MM_gpexpand
  - MM_pt-rebuild
  - MU_check_centos
  - gate_mm_end

{% endif %}
{% if "DPM" in test_sections %}
## ======================================================================

- name: G:DPM
  jobs:
  - gate_dpm_start
  - DPM_backup-restore
  - DPM_backup-restore_ddboost_part1
  - DPM_backup-restore_ddboost_part2
  - DPM_backup-restore_ddboost_part3
  - DPM_backup-restore_netbackup_part1
  - DPM_backup-restore_netbackup_part2
  - DPM_backup-restore_netbackup_part3
  - DPM_backup_43_restore_5
  - gptransfer-43x-to-5x
  - gptransfer-5x-to-5x
  - gate_dpm_end

{% endif %}
{% if "AA" in test_sections %}
## ======================================================================

- name: G:AdvancedAnalytics
  jobs:
  - gate_advanced_analytics_start
{% for platform in postgis_build_platforms %}
  - postgis_build_[[ platform ]]
{% endfor %}
{% for test_name in aa_Test_suites %}
{% set platform_version = '7' if "centos7" in test_name else '6' %}
{% set orca_state = 'off' if "Planner" in test_name else 'on' %}
  - MADlib_Test_[[ test_name ]]
  - Postgis_Test_[[ test_name ]]
{% endfor %}
  - gate_advanced_analytics_end

{% endif %}
{% if "UD" in test_sections %}
## ======================================================================

- name: G:UD
  jobs:
  - gate_ud_start
  - regression_tests_gphdfs_hadoop_centos
  - regression_tests_gphdfs_mapr_centos
  - gate_ud_end

{% endif %}
{% if "FileRep" in test_sections %}
## ======================================================================

- name: G:FileRep
  jobs:
  - gate_filerep_start
{% for test_name in cs_filerep_end_to_end_suites %}
  - cs_[[ test_name ]]
{% endfor %}
  - gate_filerep_end

{% endif %}
## ======================================================================
##                                           _
##  _ __ ___  ___  ___  _   _ _ __ ___ ___  | |_ _   _ _ __   ___  ___
## | '__/ _ \/ __|/ _ \| | | | '__/ __/ _ \ | __| | | | '_ \ / _ \/ __|
## | | |  __/\__ \ (_) | |_| | | | (_|  __/ | |_| |_| | |_) |  __/\__ \
## |_|  \___||___/\___/ \__,_|_|  \___\___|  \__|\__, | .__/ \___||___/
##                                               |___/|_|
## ======================================================================

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

## ======================================================================
##  _ __ ___  ___  ___  _   _ _ __ ___ ___  ___
## | '__/ _ \/ __|/ _ \| | | | '__/ __/ _ \/ __|
## | | |  __/\__ \ (_) | |_| | | | (_|  __/\__ \
## |_|  \___||___/\___/ \__,_|_|  \___\___||___/
## ======================================================================

resources:
{% if "CS"      in test_sections or
      "DPM"     in test_sections or
      "FileRep" in test_sections or
      "MPP"     in test_sections or
      "UD"      in test_sections or
      "MM"      in test_sections %}
- name: ccp_src
  type: git
  source:
    branch: {{ccp-git-branch}}
    private_key: {{ccp-git-key}}
    uri: {{ccp-git-remote}}

- name: terraform
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
      AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
      GOOGLE_CREDENTIALS: {{google-service-account-key}}
    vars:
      project_id: {{google-project-id}}
    storage:
      access_key_id: {{tf-machine-access-key-id}}
      secret_access_key: {{tf-machine-secret-access-key}}
      region_name: {{aws-region}}
      # This is not parameterized, on purpose. All tfstates will go to this spot,
      # and different teams will place there clusters' tfstate files under different paths
      bucket: gpdb5-pipeline-dynamic-terraform
      bucket_path: clusters-google/

{% endif %}
{% if "DPM" in test_sections %}
# a second cluster for gptransfer tests
- name: terraform2
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
      AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
      GOOGLE_CREDENTIALS: {{google-service-account-key}}
    vars:
      project_id: {{google-project-id}}
    storage:
      access_key_id: {{tf-machine-access-key-id}}
      secret_access_key: {{tf-machine-secret-access-key}}
      region_name: {{aws-region}}
      bucket: gpdb5-pipeline-dynamic-terraform
      bucket_path: clusters-google/

- name: terraform_for_dpm
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
      AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
    storage:
      access_key_id: {{tf-machine-access-key-id}}
      secret_access_key: {{tf-machine-secret-access-key}}
      region_name: {{aws-region}}
      # This is not parameterized, on purpose. All tfstates will go to this spot,
      # and different teams will place there clusters' tfstate files under different paths
      bucket: gpdb5-pipeline-dynamic-terraform
      bucket_path: clusters-aws/

{% endif %}
- name: aix_environments
  type: pool
  source:
    uri: {{concourse-resource-pools-git-remote}}
    branch: master
    pool: client_loader_remote_aix
    private_key: {{concourse-resource-pools-git-key}}

- name: gpdb_src
  type: git
  source:
    branch: {{gpdb-git-branch}}
    uri: {{gpdb-git-remote}}
    ignore_paths:
    - gpdb-doc/*
    - README*

- name: gpdb_src_latest_5X_tag
  type: git
  source:
    branch: 5X_STABLE
    uri: {{gpdb-git-remote}}
    tag_filter: 5.*

- name: gpdb_src_binary_swap
  type: git
  source:
    branch: {{gpdb-binary-swap-git-tag}}
    uri: {{gpdb-binary-swap-git-remote}}
    ignore_paths:
    - gpdb-doc/*
    - README*

- name: gpaddon_src
  type: git
  source:
    branch: {{gpaddon-git-branch}}
    private_key: {{gpaddon-git-key}}
    uri: {{gpaddon-git-remote}}

- name: docker-in-concourse
  type: git
  source:
    uri: git@github.com:pivotal/docker-in-concourse
    private_key: {{docker-in-concourse-git-key}}

- name: debian_release
  type: git
  source:
    branch: ((debian-release-git-branch))
    uri: ((debian-release-git-remote))

- name: centos-gpdb-dev-6
  type: docker-image
  source:
    repository: pivotaldata/centos-gpdb-dev
    tag: '6-gcc6.2-llvm3.7'

- name: centos-gpdb-dev-7
  type: docker-image
  source:
    repository: pivotaldata/centos-gpdb-dev
    tag: 7-gcc6.2-llvm3.7

- name: oracle-gpdb-test-7
  type: docker-image
  source:
    repository: pivotaldata/oracle7-test
    tag: gpdb5-latest

- name: ubuntu-gpdb-dev-16
  type: docker-image
  source:
    repository: pivotaldata/ubuntu-gpdb-dev
    tag: '16.04'

- name: ubuntu16.04-test
  type: docker-image
  source:
    repository: pivotaldata/ubuntu16.04-test
    tag: gpdb5-latest

- name: ubuntu-gpdb-debian-dev-16
  type: docker-image
  source:
    repository: pivotaldata/ubuntu-gpdb-debian-dev
    tag: '16.04'

- name: ubuntu-gpcloud-dev-16
  type: docker-image
  source:
    repository: pivotaldata/ubuntu-gpcloud-dev
    tag: '16.04'
    username: {{docker_username}}
    password: {{docker_password}}

- name: centos-mingw
  type: docker-image
  source:
    repository: pivotaldata/centos-mingw

- name: bin_gpdb_centos6
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    versioned_file: {{bin_gpdb_centos_versioned_file}}

{% if pipeline_type == "prod" %}
- name: bin_gpdb_centos6_icw_green
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    versioned_file: bin_gpdb_centos6/gpdb_branch_5X_STABLE/icw_green/bin_gpdb.tar.gz

- name: bin_gpdb_centos7_icw_green
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    versioned_file: bin_gpdb_centos7/gpdb_branch_5X_STABLE/icw_green/bin_gpdb.tar.gz

- name: bin_gpdb_sles11_icw_green
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    versioned_file: bin_gpdb_sles11/gpdb_branch_5X_STABLE/icw_green/bin_gpdb.tar.gz

- name: bin_gpdb_centos6_rc
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{gpdb-stable-builds-bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    versioned_file: release_candidates/bin_gpdb_centos6/gpdb5/bin_gpdb.tar.gz

- name: bin_gpdb_centos7_rc
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{gpdb-stable-builds-bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    versioned_file: release_candidates/bin_gpdb_centos7/gpdb5/bin_gpdb.tar.gz

- name: bin_gpdb_sles11_rc
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{gpdb-stable-builds-bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    versioned_file: release_candidates/bin_gpdb_sles11/gpdb5/bin_gpdb.tar.gz

{% endif %}
- name: compiled_bits_ubuntu16
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    versioned_file: {{compiled_bits_ubuntu16_versioned_file}}

- name: binary_swap_gpdb_centos6
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    versioned_file: {{binary_swap_gpdb_centos_versioned_file}}

- name: bin_gpdb_centos7
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    versioned_file: {{bin_gpdb_centos7_versioned_file}}

- name: bin_gpdb_sles11
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    versioned_file: {{bin_gpdb_sles11_versioned_file}}

- name: bin_gpdb_ubuntu16
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    versioned_file: {{bin_gpdb_ubuntu16_versioned_file}}

- name: bin_gpdb_windows_clients
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    regexp: windows-cl/greenplum-clients-5.(.*)-WinXP-x86_32.msi

- name: bin_gpdb_windows_loaders
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    regexp: windows-cl/greenplum-loaders-5.(.*)-WinXP-x86_32.msi

{% if "DPM" in test_sections %}
- name: bin_gpdb4_centos6
  type: s3
  source:
    access_key_id: {{gpdb4-bucket-access-key-id}}
    bucket: {{gpdb4-bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{gpdb4-bucket-secret-access-key}}
    versioned_file: bin_gpdb_centos/bin_gpdb.tar.gz

{% endif %}
- name: installer_rhel6_gpdb_clients
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    regexp: deliverables/greenplum-clients-5.(.*)-rhel6-x86_64.zip

- name: installer_rhel6_gpdb_loaders
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    regexp: deliverables/greenplum-loaders-5.(.*)-rhel6-x86_64.zip

- name: installer_rhel7_gpdb_clients
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    regexp: deliverables/greenplum-clients-5.(.*)-rhel7-x86_64.zip

- name: installer_rhel7_gpdb_loaders
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    regexp: deliverables/greenplum-loaders-5.(.*)-rhel7-x86_64.zip

- name: installer_aix7_gpdb_clients
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    regexp: deliverables/greenplum-clients-5.(.*)-aix7_ppc_64.zip

- name: installer_aix7_gpdb_loaders
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    regexp: deliverables/greenplum-loaders-5.(.*)-aix7_ppc_64.zip

- name: installer_sles11_gpdb_clients
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    regexp: deliverables/greenplum-clients-5.(.*)-sles11-x86_64.zip

- name: installer_sles11_gpdb_loaders
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    regexp: deliverables/greenplum-loaders-5.(.*)-sles11-x86_64.zip

- name: deb_package_ubuntu16
  type: s3
  source:
    access_key_id: ((bucket-access-key-id))
    bucket: ((bucket-name))
    region_name: ((aws-region))
    secret_access_key: ((bucket-secret-access-key))
    regexp: deb_package_ubuntu16/greenplum-db_(.*)_amd64.deb

- name: deb_package_open_source_ubuntu16
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    versioned_file: {{deb_package_open_source_ubuntu16_versioned_file}}

{% if "DPM" in test_sections %}
- name: nightly-trigger
  type: time
  source:
    location: America/Los_Angeles
    days: [Sunday, Monday, Tuesday, Wednesday, Thursday, Friday]
    start: 6:00 AM
    stop: 7:00 AM

{% endif %}
- name: nightly-trigger-aix
  type: time
  source:
    location: America/Los_Angeles
    days: [Sunday, Monday, Tuesday, Wednesday, Thursday, Friday]
    start: 8:00 AM
    stop: 9:00 AM

{% if "AA" in test_sections %}
- name: madlib_ci
  type: git
  source:
    branch: {{madlib-ci-git-branch}}
    uri: {{madlib-ci-git-remote}}
    private_key: {{madlib-ci-git-key}}

- name: madlib_gppkg
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: madlib-concourse
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    regexp: release/gpdb5/madlib-(.*)-gp5-rhel6-x86_64.gppkg

- name: gcc_4.4.2_snowflake
  type: s3
  source:
    access_key_id: {{madlib-s3-access_key_id}}
    bucket: {{gcc-442-bucket}}
    region_name: us-west-2
    secret_access_key: {{madlib-s3-secret_access_key}}
    versioned_file: compiled-rhel-gcc-442.tar.gz

- name: postgis_src
  type: git
  source:
    branch: master
    tag_filter: rel/v2.1.5+pivotal.2
    uri: https://github.com/greenplum-db/geospatial.git

- name: postgis_gppkg_centos6
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: madlib-concourse
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    versioned_file: {{postgis-gppkg-rhel6}}

- name: postgis_gppkg_centos7
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: madlib-concourse
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    versioned_file: {{postgis-gppkg-rhel7}}

{% endif %}
{% if "DPM" in test_sections %}
# Resource used for Netbackup test
- name: netbackup-client-installer
  type: s3
  source:
    access_key_id: {{gpdb4-bucket-access-key-id}}
    bucket: {{dpm_bucket}}
    region_name: {{aws-region}}
    secret_access_key: {{gpdb4-bucket-secret-access-key}}
    versioned_file: netbackup-installation/NetBackup_7.7.3_CLIENTS_RHEL_2.6.18.tar.gz

# Resource used for DDBoost test
- name: ddboost_rpm
  type: s3
  source:
    access_key_id: {{gpdb4-bucket-access-key-id}}
    bucket: {{dpm_bucket}}
    region_name: {{aws-region}}
    secret_access_key: {{gpdb4-bucket-secret-access-key}}
    versioned_file: compat-libstdc-33-3.2.3-69.el6.x86_64.rpm

{% endif %}
- name: reduced-frequency-trigger
  type: time
  source:
    location: America/Los_Angeles
    days: [Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday]
    start: {{reduced-frequency-trigger-start}}
    stop: {{reduced-frequency-trigger-stop}}

## ======================================================================
##                   _
##   __ _ _ __   ___| |__   ___  _ __ ___
##  / _` | '_ \ / __| '_ \ / _ \| '__/ __|
## | (_| | | | | (__| | | | (_) | |  \__ \
##  \__,_|_| |_|\___|_| |_|\___/|_|  |___/
## ======================================================================

anchors:
- &ccp_jitter_delay
  do:
  - task: ccp jitter delay
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      run:
        path: 'sh'
        args: ['-c', 'sleep `expr $RANDOM % {{ccp_delay_jitter}} + 1`']

ccp_default_params_anchor: &ccp_default_params
  action: create
  delete_on_failure: true
  generate_random_name: true
  terraform_source: ccp_src/google/

ccp_vars_anchor: &ccp_default_vars
  instance_type: n1-standard-1
  PLATFORM: centos6

ccp_aws_vars_anchor: &ccp_aws_default_vars
  aws_instance-node-instance_type: t2.medium
  PLATFORM: centos6

ccp_destroy_anchor: &ccp_destroy
  put: terraform
  params:
    action: destroy
    env_name_file: terraform/name
    terraform_source: ccp_src/google/
    vars:
      aws_instance-node-instance_type: t2.micro #t2.micro is ignored in destroy, but aws_instance-node-instance_type is required.
      aws_ebs_volume_type: standard
  get_params:
    action: destroy

ccp_nvme_destroy_anchor: &ccp_destroy_nvme
  put: terraform
  params:
    action: destroy
    env_name_file: terraform/name
    terraform_source: ccp_src/google-nvme-block-device/
    vars:
      aws_instance-node-instance_type: t2.micro #t2.micro is ignored in destroy, but aws_instance-node-instance_type is required.
      instance_type: n1-standard-1
      aws_ebs_volume_type: standard
  get_params:
    action: destroy

ccp_destroy_clusters_anchor: &ccp_destroy_two_clusters
  do:
  - *ccp_destroy
  - put: terraform2
    params:
      action: destroy
      env_name_file: terraform2/name
      terraform_source: ccp_src/google/
      vars:
        PLATFORM: centos6
        aws_instance-node-instance_type: t2.micro
        cluster_suffix: "-2"
    get_params:
      action: destroy

dpm_ccp_destroy_anchor: &dpm_ccp_destroy
  put: terraform_for_dpm
  tags: ["ddboost"]
  params:
    action: destroy
    env_name_file: terraform_for_dpm/name
    terraform_source: ccp_src/aws/
    vars:
      aws_instance-node-instance_type: t2.micro #t2.micro is ignored in destroy, but aws_instance-node-instance_type is required.
  get_params:
    action: destroy

ccp_gen_cluster_default_params_anchor: &ccp_gen_cluster_default_params
  AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
  AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
  AWS_DEFAULT_REGION: {{aws-region}}
  BUCKET_PATH: clusters-google/
  BUCKET_NAME: {{tf-bucket-name}}
  CLOUD_PROVIDER: google

ccp_aws_gen_cluster_default_params_anchor: &ccp_aws_gen_cluster_default_params
  AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
  AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
  AWS_DEFAULT_REGION: {{aws-region}}
  BUCKET_PATH: clusters-aws/
  BUCKET_NAME: {{tf-bucket-name}}
  CLOUD_PROVIDER: aws

set_failed_anchor: &set_failed
  do:
  - task: on_failure_set_failed
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/ccp
          tag: "7"
      inputs:
        - name: ccp_src
        - name: terraform
      run:
        path: 'ccp_src/google/ccp_failed_test.sh'
      params:
        GOOGLE_CREDENTIALS: {{google-service-account-key}}
        GOOGLE_PROJECT_ID: {{google-project-id}}
        GOOGLE_ZONE: {{google-zone}}
        GOOGLE_SERVICE_ACCOUNT: {{google-service-account}}
        AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
        AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
        AWS_DEFAULT_REGION: {{tf-machine-region}}
        BUCKET_PATH: clusters-google/
        BUCKET_NAME: {{tf-bucket-name}}

set_failed_two_clusters_anchor: &set_failed_two_clusters
  do:
  - *set_failed
  - task: on_failure_set_failed
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/ccp
          tag: "7"
      inputs:
        - name: ccp_src
        - name: terraform2
      run:
        path: 'ccp_src/google/ccp_failed_test.sh'
      params:
        GOOGLE_CREDENTIALS: {{google-service-account-key}}
        GOOGLE_PROJECT_ID: {{google-project-id}}
        GOOGLE_ZONE: {{google-zone}}
        GOOGLE_SERVICE_ACCOUNT: {{google-service-account}}
        AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
        AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
        AWS_DEFAULT_REGION: {{tf-machine-region}}
        BUCKET_PATH: clusters-google/
        BUCKET_NAME: {{tf-bucket-name}}

dpm_debug_sleep_anchor: &dpm_debug_sleep
  do:
  - task: debug_sleep
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
          tag: latest
      run:
        path: 'sh'
        args: ['-c', 'sleep {{ccp_debug_sleep}}']

cs_ccp_aggregate_dpm_start_anchor: &cs_ccp_aggregate_dpm_start
  - get: gpdb_src
    passed: [gate_dpm_start]
  - get: gpdb_binary
    resource: bin_gpdb_centos6
    passed: [gate_dpm_start]
  - get: ccp_src
  - get: centos-gpdb-dev-6

cs_ccp_aggregate_mpp_start_anchor: &cs_ccp_aggregate_mpp_start
  - get: gpdb_src
    passed: [gate_cs_start]
  - get: gpdb_binary
    resource: bin_gpdb_centos6
    passed: [gate_cs_start]
    trigger: [[ test_trigger ]]
  - get: ccp_src
  - get: centos-gpdb-dev-6

cs_ccp_terraform_vars_anchor: &cs_ccp_terraform_vars
  instance_type: n1-standard-2
  aws_ebs_volume_type: gp2
  number_of_nodes: 1

cs_ccp_terraform_params_anchor: &cs_ccp_terraform_params
  params:
    <<: *ccp_default_params
    vars:
      <<: *ccp_default_vars
      <<: *cs_ccp_terraform_vars

cs_ccp_gen_cluster_params_anchor: &cs_ccp_gen_cluster_params
  file: ccp_src/ci/tasks/gen_cluster.yml
  params:
    <<: *ccp_gen_cluster_default_params

cs_ccp_run_tests_params_anchor: &cs_ccp_run_tests_params
  file: gpdb_src/concourse/tasks/run_tinc.yml
  image: centos-gpdb-dev-6
  on_success:
    <<: *ccp_destroy

## ======================================================================
##    _       _
##   (_) ___ | |__  ___
##   | |/ _ \| '_ \/ __|
##   | | (_) | |_) \__ \
##  _/ |\___/|_.__/|___/
## |__/
## ======================================================================

jobs:

## ======================================================================
##   ____                      _ _
##  / ___|___  _ __ ___  _ __ (_) | ___
## | |   / _ \| '_ ` _ \| '_ \| | |/ _ \
## | |__| (_) | | | | | | |_) | | |  __/
##  \____\___/|_| |_| |_| .__/|_|_|\___|
##                      |_|
## ======================================================================

- name: gate_compile_start
  plan:
  - aggregate:
    - get: gpdb_src
      trigger: true
    - get: gpaddon_src
      trigger: true
    - get: gpdb_src_binary_swap
      trigger: true
    - get: centos-gpdb-dev-6
    - get: centos-gpdb-dev-7
    - get: centos-mingw
    - get: ubuntu-gpdb-dev-16
    - get: ubuntu-gpdb-debian-dev-16
    - get: ubuntu-gpcloud-dev-16

- name: compile_gpdb_centos6
  plan:
  - aggregate:
    - get: reduced-frequency-trigger
      trigger: ((reduced-frequency-trigger-flag))
    - get: gpdb_src
      passed: [gate_compile_start]
      trigger: ((gpdb_src-trigger-flag))
    - get: gpaddon_src
      passed: [gate_compile_start]
    - get: centos-gpdb-dev-6
      passed: [gate_compile_start]
  - task: sync_tools
    file: gpdb_src/concourse/tasks/sync_tools.yml
    image: centos-gpdb-dev-6
    params:
      IVYREPO_HOST: {{ivyrepo_host}}
      IVYREPO_REALM: {{ivyrepo_realm}}
      IVYREPO_USER: {{ivyrepo_user}}
      IVYREPO_PASSWD: {{ivyrepo_passwd}}
      TARGET_OS: centos
      TARGET_OS_VERSION: 6
      TASK_OS: centos
      TASK_OS_VERSION: 6
  - task: compile_gpdb
    file: gpdb_src/concourse/tasks/compile_gpdb.yml
    image: centos-gpdb-dev-6
    params:
      CONFIGURE_FLAGS: {{configure_flags}}
      TARGET_OS: centos
      TARGET_OS_VERSION: 6
      BLD_TARGETS: "clients loaders"
  - aggregate:
    - put: bin_gpdb_centos6
      params:
        file: gpdb_artifacts/bin_gpdb.tar.gz
    - put: installer_rhel6_gpdb_clients
      params:
        file: gpdb_artifacts/greenplum-clients-*-rhel6-x86_64.zip
    - put: installer_rhel6_gpdb_loaders
      params:
        file: gpdb_artifacts/greenplum-loaders-*-rhel6-x86_64.zip

- name: compile_gpdb_centos7
  plan:
  - aggregate:
    - get: reduced-frequency-trigger
      trigger: ((reduced-frequency-trigger-flag))
    - get: gpdb_src
      passed: [gate_compile_start]
      trigger: ((gpdb_src-trigger-flag))
    - get: gpaddon_src
      passed: [gate_compile_start]
    - get: centos-gpdb-dev-7
      passed: [gate_compile_start]
  - task: sync_tools
    file: gpdb_src/concourse/tasks/sync_tools.yml
    image: centos-gpdb-dev-7
    params:
      IVYREPO_HOST: {{ivyrepo_host}}
      IVYREPO_REALM: {{ivyrepo_realm}}
      IVYREPO_USER: {{ivyrepo_user}}
      IVYREPO_PASSWD: {{ivyrepo_passwd}}
      TARGET_OS: centos
      TARGET_OS_VERSION: 7
      TASK_OS: centos
      TASK_OS_VERSION: 7
  - task: compile_gpdb
    image: centos-gpdb-dev-7
    file: gpdb_src/concourse/tasks/compile_gpdb.yml
    params:
      CONFIGURE_FLAGS: {{configure_flags}}
      TARGET_OS: centos
      TARGET_OS_VERSION: 7
      BLD_TARGETS: "clients loaders"
  - aggregate:
    - put: bin_gpdb_centos7
      params:
        file: gpdb_artifacts/bin_gpdb.tar.gz
    - put: installer_rhel7_gpdb_clients
      params:
        file: gpdb_artifacts/greenplum-clients-*-rhel7-x86_64.zip
    - put: installer_rhel7_gpdb_loaders
      params:
        file: gpdb_artifacts/greenplum-loaders-*-rhel7-x86_64.zip

- name: compile_gpdb_sles11
  plan:
  - aggregate:
    - get: reduced-frequency-trigger
      trigger: ((reduced-frequency-trigger-flag))
    - get: gpdb_src
      passed: [gate_compile_start]
      trigger: ((gpdb_src-trigger-flag))
    - get: gpaddon_src
      passed: [gate_compile_start]
    - get: centos-gpdb-dev-7
      passed: [gate_compile_start]
  - task: sync_tools
    file: gpdb_src/concourse/tasks/sync_tools.yml
    image: centos-gpdb-dev-7
    params:
      IVYREPO_HOST: {{ivyrepo_host}}
      IVYREPO_REALM: {{ivyrepo_realm}}
      IVYREPO_USER: {{ivyrepo_user}}
      IVYREPO_PASSWD: {{ivyrepo_passwd}}
      TARGET_OS: sles
      TARGET_OS_VERSION:
      TASK_OS: centos
      TASK_OS_VERSION: 7
  - task: compile_gpdb
    file: gpdb_src/concourse/tasks/compile_gpdb_sles11.yml
    params:
      CONFIGURE_FLAGS: {{configure_flags}}
      TARGET_OS: sles
      TARGET_OS_VERSION:
      BLD_TARGETS: "clients loaders"
  - put: bin_gpdb_sles11
    params:
      file: gpdb_artifacts/bin_gpdb.tar.gz
  - put: installer_sles11_gpdb_clients
    params:
      file: gpdb_artifacts/greenplum-clients-*-sles11-x86_64.zip
  - put: installer_sles11_gpdb_loaders
    params:
      file: gpdb_artifacts/greenplum-loaders-*-sles11-x86_64.zip

- name: compile_gpdb_ubuntu16
  plan:
  - aggregate:
    - get: reduced-frequency-trigger
      trigger: ((reduced-frequency-trigger-flag))
    - get: gpdb_src
      passed: [gate_compile_start]
      trigger: ((gpdb_src-trigger-flag))
    - get: gpaddon_src
      passed: [gate_compile_start]
    - get: docker-in-concourse
    - get: ubuntu-gpcloud-dev-16
      passed: [gate_compile_start]
  - task: compile_gpdb
    file: gpdb_src/concourse/tasks/compile_gpdb_ubuntu16.yml
    image: ubuntu-gpcloud-dev-16
    privileged: true
  - aggregate:
    - put: bin_gpdb_ubuntu16
      params:
        file: gpdb_artifacts/bin_gpdb.tar.gz
    - put: deb_package_ubuntu16
      params:
        file: gpdb_artifacts/greenplum-db*.deb

- name: compile_gpdb_ubuntu16_oss
  plan:
  - aggregate:
    - get: reduced-frequency-trigger
      trigger: ((reduced-frequency-trigger-flag))
    - get: gpdb_src
      passed: [gate_compile_start]
      trigger: ((gpdb_src-trigger-flag))
    - get: ubuntu-gpdb-dev-16
      passed: [gate_compile_start]
    - get: ubuntu-gpdb-debian-dev-16
      passed:
      - gate_compile_start
    - get: debian_release
  - aggregate:
    - task: compile_gpdb
      image: ubuntu-gpdb-dev-16
      file: gpdb_src/concourse/tasks/compile_gpdb_open_source_ubuntu.yml
      params:
        CONFIGURE_FLAGS: {{configure_flags}}
    - task: deb_create_package
      file: gpdb_src/concourse/tasks/deb_create_package.yml
      image: ubuntu-gpdb-debian-dev-16
      params:
        DEBFULLNAME: ((debian-package-maintainer-fullname))
        DEBEMAIL: ((debian-package-maintainer-email))
  - aggregate:
    - put: compiled_bits_ubuntu16
      params:
        file: compiled_bits_ubuntu16/compiled_bits_ubuntu16.tar.gz
    - put: deb_package_open_source_ubuntu16
      params:
        file: {{deb_package_open_source_ubuntu16_versioned_file}}

- name: compile_gpdb_ubuntu16_oss_abi
  plan:
  - aggregate:
    - get: gpdb_src
      passed: [gate_compile_start]
      trigger: ((gpdb_src-trigger-flag))
    - get: gpdb_src_latest_5X_tag
    - get: ubuntu-gpdb-dev-16
      passed: [gate_compile_start]
  - aggregate:
    - task: compile_gpdb_head
      image: ubuntu-gpdb-dev-16
      config:
        platform: linux
        inputs:
          - name: gpdb_src
        outputs:
          - name: compiled_bits_ubuntu16_head
        run:
          path: gpdb_src/concourse/scripts/compile_gpdb_open_source_ubuntu.bash
        params:
          CFLAGS: -g -Og
          CXXFLAGS: -g -Og
          CONFIGURE_FLAGS: {{configure_flags}}
          TRANSFER_DIR: compiled_bits_ubuntu16_head
          COMPILED_BITS_FILENAME: compiled_bits_ubuntu16.tar.gz
    - task: compile_gpdb_tag
      image: ubuntu-gpdb-dev-16
      input_mapping:
        gpdb_src: gpdb_src_latest_5X_tag
      config:
        platform: linux
        inputs:
          - name: gpdb_src
        outputs:
          - name: compiled_bits_ubuntu16_tag
        run:
          path: gpdb_src/concourse/scripts/compile_gpdb_open_source_ubuntu.bash
        params:
          CFLAGS: -g -Og
          CXXFLAGS: -g -Og
          CONFIGURE_FLAGS: {{configure_flags}}
          TRANSFER_DIR: compiled_bits_ubuntu16_tag
          COMPILED_BITS_FILENAME: compiled_bits_ubuntu16.tar.gz
  - task: compare_abi
    image: ubuntu-gpdb-dev-16
    config:
      platform: linux
      inputs:
        - name: gpdb_src
        - name: compiled_bits_ubuntu16_head
        - name: compiled_bits_ubuntu16_tag
      outputs:
        - name: abi
      run:
        path: gpdb_src/concourse/scripts/compare_abi_ubuntu.bash
        args: [
          'bin/postgres',
          'lib/libecpg.so',
          'lib/libecpg_compat.so',
          'lib/libgppc.so',
          'lib/libpgtypes.so',
          'lib/libpq.so',
        ]
      params:
  - task: publish_report
    image: ubuntu-gpdb-dev-16
    config:
      platform: linux
      inputs:
        - name: gpdb_src
        - name: abi
      run:
        path: gpdb_src/concourse/scripts/s3_sync
        args: [ "./abi/", "s3://((public-bucket-name))/" ]
      params:
        AWS_ACCESS_KEY_ID: {{bucket-access-key-id}}
        AWS_SECRET_ACCESS_KEY: {{bucket-secret-access-key}}
        AWS_DEFAULT_REGION: {{aws-region}}

- name: compile_gpdb_open_source_centos6
  public: true
  plan:
  - aggregate:
    - get: reduced-frequency-trigger
      trigger: ((reduced-frequency-trigger-flag))
    - get: gpdb_src
      passed: [gate_compile_start]
      trigger: ((gpdb_src-trigger-flag))
    - get: centos-gpdb-dev-6
      passed: [gate_compile_start]
  - task: compile_gpdb
    image: centos-gpdb-dev-6
    file: gpdb_src/concourse/tasks/compile_gpdb_open_source_centos.yml
    params:
        CONFIGURE_FLAGS: {{configure_flags}}

- name: compile_gpdb_binary_swap_centos6
  plan:
  # This acts like a cache as this job will only be run once to get a
  # binary to use for our binary swap compatibility tests. Setting a new
  # tag or branch for the gpdb_src_binary_swap resource via set-pipeline
  # will replace the cached binary.
  - aggregate:
    - get: gpdb_src
      resource: gpdb_src_binary_swap
      trigger: true
      passed: [gate_compile_start]
    - get: gpaddon_src
      passed: [gate_compile_start]
    - get: centos-gpdb-dev-6
      passed: [gate_compile_start]
  - task: compile_gpdb
    file: gpdb_src/concourse/tasks/compile_gpdb.yml
    image: centos-gpdb-dev-6
    params:
      IVYREPO_HOST: {{ivyrepo_host}}
      IVYREPO_REALM: {{ivyrepo_realm}}
      IVYREPO_USER: {{ivyrepo_user}}
      IVYREPO_PASSWD: {{ivyrepo_passwd}}
      TARGET_OS: centos
      TARGET_OS_VERSION: 6
  - aggregate:
    - put: binary_swap_gpdb_centos6
      params:
        file: gpdb_artifacts/bin_gpdb.tar.gz

- name: compile_gpdb_windows_cl
  plan:
  - aggregate:
    - get: reduced-frequency-trigger
      trigger: ((reduced-frequency-trigger-flag))
      tags: ["wix"]
    - get: gpdb_src
      trigger: ((gpdb_src-trigger-flag))
      passed: [gate_compile_start]
      tags: ["wix"]
    - get: gpaddon_src
      tags: ["wix"]
      passed: [gate_compile_start]
    - get: centos-mingw
      tags: ["wix"]
      passed: [gate_compile_start]
    - get: centos-gpdb-dev-7
      tags: ["wix"]
      passed: [gate_compile_start]
  - task: sync_tools
    file: gpdb_src/concourse/tasks/sync_tools.yml
    image: centos-gpdb-dev-7
    params:
      IVYREPO_HOST: {{ivyrepo_host}}
      IVYREPO_REALM: {{ivyrepo_realm}}
      IVYREPO_USER: {{ivyrepo_user}}
      IVYREPO_PASSWD: {{ivyrepo_passwd}}
      TARGET_OS: win32
      TARGET_OS_VERSION:
      TASK_OS: centos
      TASK_OS_VERSION: 7
  - task: compile_gpdb
    tags: ["wix"]
    image: centos-mingw
    file: gpdb_src/concourse/tasks/compile_gpdb.yml
    params:
      CONFIGURE_FLAGS: {{configure_flags}}
      TARGET_OS: win32
      TARGET_OS_VERSION:
      BLD_TARGETS: "clients loaders"
  - aggregate:
    - put: bin_gpdb_windows_clients
      tags: ["wix"]
      params:
        file: gpdb_artifacts/greenplum-clients-*-WinXP-x86_32.msi
    - put: bin_gpdb_windows_loaders
      tags: ["wix"]
      params:
        file: gpdb_artifacts/greenplum-loaders-*-WinXP-x86_32.msi

- name: compile_gpdb_aix7_remote
  serial: true
  plan:
  # Compile gpdb on a remote AIX machine, triggered by concourse.
  # We need to serialize this job to avoid overwhelming workload
  # on remote machine.
  - aggregate:
    - get: nightly-trigger-aix
      trigger: true
    - get: gpdb_src
      passed: [gate_compile_start]
    - get: gpaddon_src
      passed: [gate_compile_start]
    - get: centos-gpdb-dev-6
      passed: [gate_compile_start]
  - task: compile_gpdb_aix7_remote
    file: gpdb_src/concourse/tasks/compile_gpdb_remote.yml
    image: centos-gpdb-dev-6
    params:
      REMOTE_HOST: {{remote_host_build}}
      REMOTE_PORT: {{remote_port_build}}
      REMOTE_USER: {{remote_user_build}}
      REMOTE_KEY: {{remote_key_build}}
      IVYREPO_HOST: {{ivyrepo_host}}
      IVYREPO_REALM: {{ivyrepo_realm}}
      IVYREPO_USER: {{ivyrepo_user}}
      IVYREPO_PASSWD: {{ivyrepo_passwd}}
      BLD_TARGETS: "clients loaders"
  - aggregate:
    - put: installer_aix7_gpdb_clients
      params:
        file: gpdb_artifacts/greenplum-clients-*-aix7_ppc_64.zip
    - put: installer_aix7_gpdb_loaders
      params:
        file: gpdb_artifacts/greenplum-loaders-*-aix7_ppc_64.zip
- name: client_loader_remote_test_aix
  serial: true
  plan:
  - aggregate:
    - get: gpdb_src
      passed:
      - gate_compile_start
      - compile_gpdb_aix7_remote
      - compile_gpdb_centos6
    - get: installer_aix7_gpdb_clients
      passed:
      - compile_gpdb_aix7_remote
    - get: installer_aix7_gpdb_loaders
      passed:
      - compile_gpdb_aix7_remote
      trigger: true
    - get: bin_gpdb
      passed:
      - compile_gpdb_centos6
      resource: bin_gpdb_centos6
    - get: centos-gpdb-dev-6
      passed:
      - gate_compile_start
    - put: aix_environments
      params: {acquire: true}
  - task: ic_gpdb_cl
    file: gpdb_src/concourse/tasks/ic_gpdb_remote.yml
    image: centos-gpdb-dev-6
    params:
      BLD_TARGETS: "clients loaders"
      REMOTE_HOST: {{remote_host_test}}
      REMOTE_PORT: {{remote_port_test}}
      REMOTE_USER: {{remote_user_test}}
      REMOTE_KEY: {{remote_key_test}}
    ensure:
      do:
      - task: cleanup_aix
        file: gpdb_src/concourse/tasks/aix_remote_cleanup.yml
        image: centos-gpdb-dev-6
        params:
          REMOTE_HOST: {{remote_host_test}}
          REMOTE_PORT: {{remote_port_test}}
          REMOTE_USER: {{remote_user_test}}
          REMOTE_KEY: {{remote_key_test}}
      - put: aix_environments
        params: {release: aix_environments}

- name: gate_compile_end
  plan:
  - aggregate:
    - get: gpdb_src
      passed:
      - gate_compile_start
      - compile_gpdb_centos6
      - compile_gpdb_open_source_centos6
      - compile_gpdb_centos7
      - compile_gpdb_sles11
      - compile_gpdb_ubuntu16
      - compile_gpdb_ubuntu16_oss
      trigger: true
    - get: bin_gpdb_sles11
      passed:
      - compile_gpdb_sles11
    - get: binary_swap_gpdb_centos6
      passed:
      - compile_gpdb_binary_swap_centos6
    - get: bin_gpdb_centos7
      passed:
      - compile_gpdb_centos7
    - get: bin_gpdb_centos6
      passed:
      - compile_gpdb_centos6
    - get: compiled_bits_ubuntu16
      passed:
      - compile_gpdb_ubuntu16_oss
    - get: deb_package_open_source_ubuntu16
      passed:
      - compile_gpdb_ubuntu16_oss
    - get: deb_package_ubuntu16
      passed:
      - compile_gpdb_ubuntu16
    - get: bin_gpdb_ubuntu16
      passed:
      - compile_gpdb_ubuntu16

{% if "ICW" in test_sections %}
## ======================================================================
##  ___ ______        __
## |_ _/ ___\ \      / /
##  | | |    \ \ /\ / /
##  | | |___  \ V  V /
## |___\____|  \_/\_/
## ======================================================================

- name: gate_icw_start
  plan:
    - aggregate:
      - get: gpdb_src
        passed:
        - gate_compile_end
        trigger: true
      - get: bin_gpdb_sles11
        passed:
        - gate_compile_end
      - get: binary_swap_gpdb_centos6
        passed:
        - gate_compile_end
      - get: bin_gpdb_centos7
        passed:
        - gate_compile_end
      - get: bin_gpdb_centos6
        passed:
        - gate_compile_end
      - get: compiled_bits_ubuntu16
        passed:
        - gate_compile_end
      - get: deb_package_open_source_ubuntu16
        passed:
        - gate_compile_end
      - get: deb_package_ubuntu16
        passed:
        - gate_compile_end
      - get: bin_gpdb_ubuntu16
        passed:
        - gate_compile_end

- name: icw_planner_centos6
  plan:
  - aggregate:
    - get: gpdb_src
      passed: [gate_icw_start]
    - get: bin_gpdb
      resource: bin_gpdb_centos6
      passed: [gate_icw_start]
      trigger: [[ test_trigger ]]
    - get: binary_swap_gpdb
      resource: binary_swap_gpdb_centos6
      passed: [gate_icw_start]
      trigger: [[ test_trigger ]]
    - get: centos-gpdb-dev-6
  - task: ic_gpdb
    file: gpdb_src/concourse/tasks/ic_gpdb_binary_swap.yml
    image: centos-gpdb-dev-6
    params:
      MAKE_TEST_COMMAND: PGOPTIONS='-c optimizer=off' installcheck-world
      BLDWRAP_POSTGRES_CONF_ADDONS: "fsync=off"
      TEST_OS: centos
      CONFIGURE_FLAGS: {{configure_flags}}

- name: icw_planner_ictcp_centos6
  plan:
  - aggregate:
    - get: gpdb_src
      passed: [gate_icw_start]
    - get: bin_gpdb
      resource: bin_gpdb_centos6
      passed: [gate_icw_start]
      trigger: [[ test_trigger ]]
    - get: centos-gpdb-dev-6
  - task: ic_gpdb
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: centos-gpdb-dev-6
    params:
      MAKE_TEST_COMMAND: PGOPTIONS='-c gp_interconnect_type=tcp -c optimizer=off' installcheck-world
      BLDWRAP_POSTGRES_CONF_ADDONS: "fsync=off"
      TEST_OS: centos

- name: icw_gporca_centos6
  plan:
  - aggregate:
    - get: gpdb_src
      passed: [gate_icw_start]
    - get: bin_gpdb
      resource: bin_gpdb_centos6
      passed: [gate_icw_start]
      trigger: [[ test_trigger ]]
    - get: centos-gpdb-dev-6
  - task: ic_gpdb
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: centos-gpdb-dev-6
    params:
      MAKE_TEST_COMMAND: PGOPTIONS='-c optimizer=on' installcheck-world
      BLDWRAP_POSTGRES_CONF_ADDONS: "fsync=off"
      TEST_OS: centos
      CONFIGURE_FLAGS: {{configure_flags}}

- name: icw_gporca_centos7
  plan:
  - aggregate:
    - get: gpdb_src
      passed: [gate_icw_start]
    - get: bin_gpdb
      resource: bin_gpdb_centos7
      passed: [gate_icw_start]
      trigger: [[ test_trigger ]]
    - get: centos-gpdb-dev-7
  - task: ic_gpdb
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: centos-gpdb-dev-7
    params:
      MAKE_TEST_COMMAND: PGOPTIONS='-c optimizer=on' installcheck-world
      BLDWRAP_POSTGRES_CONF_ADDONS: "fsync=off"
      TEST_OS: centos
      CONFIGURE_FLAGS: {{configure_flags}}

- name: icw_planner_centos7
  plan:
  - aggregate:
    - get: gpdb_src
      passed: [gate_icw_start]
    - get: bin_gpdb
      resource: bin_gpdb_centos7
      passed: [gate_icw_start]
      trigger: [[ test_trigger ]]
    - get: centos-gpdb-dev-7
  - task: ic_gpdb
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: centos-gpdb-dev-7
    params:
      MAKE_TEST_COMMAND: PGOPTIONS='-c optimizer=off' installcheck-world
      BLDWRAP_POSTGRES_CONF_ADDONS: "fsync=off"
      TEST_OS: centos
      CONFIGURE_FLAGS: {{configure_flags}}

- name: icw_planner_oracle7
  plan:
  - aggregate:
    - get: gpdb_src
      passed: [gate_icw_start]
    - get: bin_gpdb
      resource: bin_gpdb_centos7
      passed: [gate_icw_start]
      trigger: [[ test_trigger ]]
    - get: oracle-gpdb-test-7
  - task: ic_gpdb
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: oracle-gpdb-test-7
    params:
      MAKE_TEST_COMMAND: PGOPTIONS='-c optimizer=off' installcheck-world
      BLDWRAP_POSTGRES_CONF_ADDONS: "fsync=off"
      TEST_OS: centos
      CONFIGURE_FLAGS: {{configure_flags}}

- name: icw_gporca_oracle7
  plan:
  - aggregate:
    - get: gpdb_src
      passed: [gate_icw_start]
    - get: bin_gpdb
      resource: bin_gpdb_centos7
      passed: [gate_icw_start]
      trigger: [[ test_trigger ]]
    - get: oracle-gpdb-test-7
  - task: ic_gpdb
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: oracle-gpdb-test-7
    params:
      MAKE_TEST_COMMAND: PGOPTIONS='-c optimizer=on' installcheck-world
      BLDWRAP_POSTGRES_CONF_ADDONS: "fsync=off"
      TEST_OS: centos
      CONFIGURE_FLAGS: {{configure_flags}}

- name: icw_gporca_sles11
  plan:
  - aggregate:
    - get: gpdb_src
      passed: [gate_icw_start]
    - get: bin_gpdb
      resource: bin_gpdb_sles11
      passed: [gate_icw_start]
      trigger: [[ test_trigger ]]
  - task: ic_gpdb
    file: gpdb_src/concourse/tasks/ic_gpdb_sles11.yml
    params:
      MAKE_TEST_COMMAND: PGOPTIONS='-c optimizer=on' installcheck-world
      BLDWRAP_POSTGRES_CONF_ADDONS: "fsync=off"
      TEST_OS: sles
      CONFIGURE_FLAGS: {{configure_flags}}

- name: icw_planner_ubuntu16
  plan:
  - aggregate:
    - get: gpdb_src
      passed: [gate_icw_start]
    - get: deb_package_ubuntu16
      passed: [gate_icw_start]
      trigger: [[ test_trigger ]]
    - get: ubuntu16.04-test
  - task: ic_gpdb
    file: gpdb_src/concourse/tasks/ic_gpdb_ubuntu.yml
    input_mapping:
      deb_package: deb_package_ubuntu16
    image: ubuntu16.04-test
    params:
      MAKE_TEST_COMMAND: PGOPTIONS='-c optimizer=off' installcheck-world
      DEBIAN_PACKAGE: deb_package/greenplum-db_*.deb
      CONFIGURE_FLAGS: {{configure_flags}}

- name: icw_planner_ubuntu16_oss
  plan:
  - aggregate:
    - get: gpdb_src
      passed: [gate_icw_start]
    - get: deb_package_open_source_ubuntu16
      passed: [gate_icw_start]
      trigger: [[ test_trigger ]]
    - get: ubuntu16.04-test
  - task: ic_gpdb
    file: gpdb_src/concourse/tasks/ic_gpdb_ubuntu.yml
    input_mapping:
      deb_package: deb_package_open_source_ubuntu16
    image: ubuntu16.04-test
    params:
      MAKE_TEST_COMMAND: PGOPTIONS='-c optimizer=off' installcheck-world
      DEBIAN_PACKAGE: deb_package/greenplum-db.deb
      CONFIGURE_FLAGS: {{configure_flags}}

- name: icw_gporca_ubuntu16
  plan:
  - aggregate:
    - get: gpdb_src
      passed: [gate_icw_start]
    - get: deb_package_ubuntu16
      passed: [gate_icw_start]
      trigger: [[ test_trigger ]]
    - get: ubuntu16.04-test
  - task: ic_gpdb
    file: gpdb_src/concourse/tasks/ic_gpdb_ubuntu.yml
    input_mapping:
      deb_package: deb_package_ubuntu16
    image: ubuntu16.04-test
    params:
      MAKE_TEST_COMMAND: PGOPTIONS='-c optimizer=on' installcheck-world
      DEBIAN_PACKAGE: deb_package/greenplum-db_*.deb
      CONFIGURE_FLAGS: {{configure_flags}}

- name: icw_gporca_ubuntu16_oss
  plan:
  - aggregate:
    - get: gpdb_src
      passed: [gate_icw_start]
    - get: deb_package_open_source_ubuntu16
      passed: [gate_icw_start]
      trigger: [[ test_trigger ]]
    - get: ubuntu16.04-test
  - task: ic_gpdb
    file: gpdb_src/concourse/tasks/ic_gpdb_ubuntu.yml
    input_mapping:
      deb_package: deb_package_open_source_ubuntu16
    image: ubuntu16.04-test
    params:
      MAKE_TEST_COMMAND: PGOPTIONS='-c optimizer=on' installcheck-world
      DEBIAN_PACKAGE: deb_package/greenplum-db.deb
      CONFIGURE_FLAGS: {{configure_flags}}

- name: icw_extensions_gpcloud
  plan:
  - aggregate:
    - get: gpdb_src
      passed: [gate_icw_start]
      trigger: [[ test_trigger ]]
    - get: bin_gpdb_centos6
      passed: [gate_icw_start]
    - get: compiled_bits_ubuntu16
      passed: [gate_icw_start]
    - get: centos-gpdb-dev-6
    - get: ubuntu-gpdb-dev-16
  - aggregate:
    - task: unit_tests_gpcloud
      file: gpdb_src/concourse/tasks/unit_tests_gpcloud.yml
      image: centos-gpdb-dev-6
      params:
        TARGET_OS: centos
    - task: regression_tests_gpcloud_centos
      input_mapping:
        bin_gpdb: bin_gpdb_centos6
      file: gpdb_src/concourse/tasks/regression_tests_gpcloud.yml
      image: centos-gpdb-dev-6
      params:
        gpcloud_access_key_id: {{gpcloud-access-key-id}}
        gpcloud_secret_access_key: {{gpcloud-secret-access-key}}
        TARGET_OS: centos
    - task: regression_tests_gpcloud_ubuntu
      input_mapping:
        bin_gpdb: compiled_bits_ubuntu16
      file: gpdb_src/concourse/tasks/regression_tests_gpcloud.yml
      image: ubuntu-gpdb-dev-16
      params:
        gpcloud_access_key_id: {{gpcloud-access-key-id}}
        gpcloud_secret_access_key: {{gpcloud-secret-access-key}}
        TARGET_OS: ubuntu
    - task: gpcheckcloud_tests_gpcloud_centos
      input_mapping:
        bin_gpdb: bin_gpdb_centos6
      file: gpdb_src/concourse/tasks/gpcheckcloud_tests_gpcloud.yml
      image: centos-gpdb-dev-6
      params:
        gpcloud_access_key_id: {{gpcloud-access-key-id}}
        gpcloud_secret_access_key: {{gpcloud-secret-access-key}}
        TARGET_OS: centos

- name: QP_memory-accounting
  plan:
  - aggregate:
    - get: gpdb_src
      passed: [gate_icw_start]
      trigger: [[ test_trigger ]]
    - get: bin_gpdb
      passed: [gate_icw_start]
      resource: bin_gpdb_centos6
    - get: centos-gpdb-dev-6
  - task: memory-accounting
    timeout: 3h
    file: gpdb_src/concourse/tasks/tinc_gpdb.yml
    image: centos-gpdb-dev-6
    params:
      MAKE_TEST_COMMAND: memory_accounting
      TEST_OS: "centos"
      CONFIGURE_FLAGS: {{configure_flags}}

- name: QP_optimizer-functional
  plan:
  - aggregate:
    - get: gpdb_src
      params: {submodules: none}
      passed: [gate_icw_start]
    - get: bin_gpdb
      resource: bin_gpdb_centos6
      passed: [gate_icw_start]
      trigger: [[ test_trigger ]]
    - get: centos-gpdb-dev-6
  - aggregate:
    - task: optimizer_functional_part1
      timeout: 3h
      file: gpdb_src/concourse/tasks/tinc_gpdb.yml
      image: centos-gpdb-dev-6
      params:
        MAKE_TEST_COMMAND: optimizer_functional_part1
        BLDWRAP_POSTGRES_CONF_ADDONS: fsync=off optimizer_print_missing_stats=off
        TEST_OS: centos
        CONFIGURE_FLAGS: {{configure_flags}}
    - task: optimizer_functional_part2
      timeout: 3h
      file: gpdb_src/concourse/tasks/tinc_gpdb.yml
      image: centos-gpdb-dev-6
      params:
        MAKE_TEST_COMMAND: optimizer_functional_part2
        BLDWRAP_POSTGRES_CONF_ADDONS: fsync=off optimizer_print_missing_stats=off
        TEST_OS: centos
        CONFIGURE_FLAGS: {{configure_flags}}

- name: gate_icw_end
  plan:
  - aggregate:
    - get: gpdb_src
      passed:
      - icw_planner_centos6
      - icw_gporca_centos6
      - icw_planner_ictcp_centos6
      - icw_gporca_centos7
      - icw_planner_centos7
      - icw_gporca_oracle7
      - icw_planner_oracle7
      - icw_gporca_sles11
      - icw_planner_ubuntu16
      - icw_planner_ubuntu16_oss
      - icw_gporca_ubuntu16
      - icw_gporca_ubuntu16_oss
      - icw_extensions_gpcloud
      - QP_memory-accounting
      - QP_optimizer-functional
      trigger: true
    - get: bin_gpdb_centos6
      passed:
      - icw_planner_centos6
      - icw_gporca_centos6
      - icw_planner_ictcp_centos6
      - icw_extensions_gpcloud
      - QP_memory-accounting
      - QP_optimizer-functional
    - get: bin_gpdb_centos7
      passed:
      - icw_planner_centos7
      - icw_gporca_centos7
      - icw_gporca_oracle7
      - icw_planner_oracle7
    - get: bin_gpdb_sles11
      passed:
      - icw_gporca_sles11
{% if pipeline_type == "prod" %}
  - aggregate:
    - put: bin_gpdb_centos6_icw_green
      params:
        file: bin_gpdb_centos6/bin_gpdb.tar.gz
    - put: bin_gpdb_centos7_icw_green
      params:
        file: bin_gpdb_centos7/bin_gpdb.tar.gz
    - put: bin_gpdb_sles11_icw_green
      params:
        file: bin_gpdb_sles11/bin_gpdb.tar.gz
{% endif %}

{% endif %}
{% if "CS" in test_sections %}
## ======================================================================
##   ____ ____
##  / ___/ ___|
## | |   \___ \
## | |___ ___) |
##  \____|____/
## ======================================================================

- name: gate_cs_start
  plan:
{% if stagger_sections %}
  # stagger starts on prod pipelines
  - task: sleep_before_starting
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      run:
        path: 'sh'
        args: ['-c', 'sleep `expr 1 \* {{group_start_delay}} + 1 + $RANDOM % {{group_delay_jitter}}`']
{% endif %}
  - aggregate:
    - get: gpdb_src
      passed:
      - gate_compile_end
      trigger: true
    - get: bin_gpdb_sles11
      passed:
      - gate_compile_end
    - get: binary_swap_gpdb_centos6
      passed:
      - gate_compile_end
    - get: bin_gpdb_centos7
      passed:
      - gate_compile_end
    - get: bin_gpdb_centos6
      passed:
      - gate_compile_end

{% for test_name in cs_walrep_suites %}
- name: cs_[[ test_name ]]
  plan:
  - *ccp_jitter_delay
  - aggregate:
    - get: gpdb_src
      passed: [gate_cs_start]
    - get: gpdb_binary
      resource: bin_gpdb_centos6
      passed: [gate_cs_start]
      trigger: [[ test_trigger ]]
    - get: ccp_src
    - get: centos-gpdb-dev-6
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: run_tests
    file: gpdb_src/concourse/tasks/run_tinc.yml
    image: centos-gpdb-dev-6
    params:
      TINC_TARGET: [[ test_name ]]
    on_success:
      <<: *ccp_destroy
  ensure:
    <<: *set_failed

{% endfor %}
{% for test_name in cs_pg_twophase_suites %}
- name: cs_[[ test_name ]]
  plan:
  - *ccp_jitter_delay
  - aggregate:
    - get: gpdb_src
      passed: [gate_cs_start]
    - get: gpdb_binary
      resource: bin_gpdb_centos6
      passed: [gate_cs_start]
      trigger: [[ test_trigger ]]
    - get: ccp_src
    - get: centos-gpdb-dev-6
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
        instance_type: n1-standard-2
        number_of_nodes: 1
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: run_tests
    file: gpdb_src/concourse/tasks/run_tinc.yml
    image: centos-gpdb-dev-6
    params:
      TINC_TARGET: test_[[ test_name ]]
    on_success:
      <<: *ccp_destroy
  ensure:
    <<: *set_failed

{% endfor %}
{% for test_name in cs_crash_recovery_suite %}
- name: cs_[[ test_name ]]
  plan:
  - *ccp_jitter_delay
  - aggregate: *cs_ccp_aggregate_mpp_start
  - put: terraform
    <<: *cs_ccp_terraform_params
  - task: gen_cluster
    <<: *cs_ccp_gen_cluster_params
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: run_tests
    <<: *cs_ccp_run_tests_params
    params:
      TINC_TARGET: [[ test_name ]]
    # ccp_destroy should be part of *cs_ccp_run_tests_params_anchor
  ensure:
    <<: *set_failed

{% endfor %}
- name: fts
  plan:
  - aggregate:
    - get: gpdb_src
      params: {submodules: none}
      passed: [gate_cs_start]
    - get: bin_gpdb
      resource: bin_gpdb_centos6
      passed: [gate_cs_start]
      trigger: [[ test_trigger ]]
    - get: centos-gpdb-dev-6
  - aggregate:
    - task: fts_transitions_part01
      file: gpdb_src/concourse/tasks/tinc_gpdb.yml
      image: centos-gpdb-dev-6
      params:
        MAKE_TEST_COMMAND: fts_transitions_part01
        BLDWRAP_POSTGRES_CONF_ADDONS: gp_segment_connect_timeout=35 gp_fts_probe_interval=20
        TEST_OS: centos
        CONFIGURE_FLAGS: {{configure_flags}}
    - task: fts_transitions_part02
      file: gpdb_src/concourse/tasks/tinc_gpdb.yml
      image: centos-gpdb-dev-6
      params:
        MAKE_TEST_COMMAND: fts_transitions_part02
        BLDWRAP_POSTGRES_CONF_ADDONS: gp_segment_connect_timeout=35 gp_fts_probe_interval=20
        TEST_OS: centos
        CONFIGURE_FLAGS: {{configure_flags}}
    - task: fts_transitions_part03
      file: gpdb_src/concourse/tasks/tinc_gpdb.yml
      image: centos-gpdb-dev-6
      params:
        MAKE_TEST_COMMAND: fts_transitions_part03
        BLDWRAP_POSTGRES_CONF_ADDONS: gp_segment_connect_timeout=35 gp_fts_probe_interval=20
        TEST_OS: centos
        CONFIGURE_FLAGS: {{configure_flags}}

- name: storage
  plan:
  - aggregate:
    - get: gpdb_src
      params: {submodules: none}
      passed: [gate_cs_start]
    - get: bin_gpdb
      resource: bin_gpdb_centos6
      passed: [gate_cs_start]
      trigger: [[ test_trigger ]]
    - get: centos-gpdb-dev-6
  - aggregate:
    - task: aocoalter_catalog_loaders
      file: gpdb_src/concourse/tasks/tinc_gpdb.yml
      params:
        MAKE_TEST_COMMAND: aocoalter_catalog_loaders
        BLDWRAP_POSTGRES_CONF_ADDONS: "fsync=off"
        TEST_OS: centos
        CONFIGURE_FLAGS: {{configure_flags}}
      image: centos-gpdb-dev-6
    - task: storage_persistent_accessmethods_and_vacuum
      file: gpdb_src/concourse/tasks/tinc_gpdb.yml
      params:
        MAKE_TEST_COMMAND: storage_persistent_accessmethods_and_vacuum
        BLDWRAP_POSTGRES_CONF_ADDONS: "fsync=off"
        TEST_OS: centos
        CONFIGURE_FLAGS: {{configure_flags}}
      image: centos-gpdb-dev-6
      timeout: 3h
    - task: storage_filerep
      file: gpdb_src/concourse/tasks/tinc_gpdb.yml
      params:
        MAKE_TEST_COMMAND: storage_filerep
        BLDWRAP_POSTGRES_CONF_ADDONS: "fsync=off"
        TEST_OS: centos
        CONFIGURE_FLAGS: {{configure_flags}}
      image: centos-gpdb-dev-6
      timeout: 3h
    - task: storage_uao_transactionmanagement
      file: gpdb_src/concourse/tasks/tinc_gpdb.yml
      params:
        MAKE_TEST_COMMAND: storage_uao_and_transactionmanagement
        BLDWRAP_POSTGRES_CONF_ADDONS: "fsync=off"
        TEST_OS: centos
        CONFIGURE_FLAGS: {{configure_flags}}
      image: centos-gpdb-dev-6
      timeout: 3h

- name: gate_cs_end
  plan:
  - aggregate:
    - get: gpdb_src
      passed: &gate_cs_passed
{% for test_name in cs_walrep_suites +
                    cs_pg_twophase_suites +
                    cs_crash_recovery_suite %}
      - cs_[[ test_name ]]
{% endfor %}
      - fts
      - storage
      trigger: true
    - get: bin_gpdb_centos6
      passed: *gate_cs_passed

{% endif %}
{% if "MPP" in test_sections %}
## ======================================================================
##  __  __ ____  ____
## |  \/  |  _ \|  _ \
## | |\/| | |_) | |_) |
## | |  | |  __/|  __/
## |_|  |_|_|   |_|
## ======================================================================

- name: gate_mpp_start
  plan:
{% if stagger_sections %}
  # stagger starts on prod pipelines
  - task: sleep_before_starting
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      run:
        path: 'sh'
        args: ['-c', 'sleep `expr 2 \* {{group_start_delay}} + 1 + $RANDOM % {{group_delay_jitter}}`']
{% endif %}
  - aggregate:
    - get: gpdb_src
      passed:
      - gate_compile_end
      trigger: true
    - get: bin_gpdb_centos6
      passed:
      - gate_compile_end
    - get: bin_gpdb_centos7
      passed:
      - gate_compile_end
    - get: binary_swap_gpdb_centos6
      passed:
      - gate_compile_end

- name: mpp_interconnect
  plan:
  - *ccp_jitter_delay
  - aggregate:
    - get: gpdb_src
      passed: [gate_mpp_start]
    - get: gpdb_binary
      resource: bin_gpdb_centos6
      passed: [gate_mpp_start]
      trigger: [[ test_trigger ]]
    - get: ccp_src
    - get: centos-gpdb-dev-6
  - put: terraform
    <<: *cs_ccp_terraform_params
  - task: gen_cluster
    <<: *cs_ccp_gen_cluster_params
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: run_tests
    <<: *cs_ccp_run_tests_params
    params:
      TINC_TARGET: mpp_interconnect
      PRE_TEST_SCRIPT_USER: centos
      PRE_TEST_SCRIPT: sudo bash -c 'yum --cacheonly list installed kernel-devel-$(uname -r)'
    # ccp_destroy should be part of *cs_ccp_run_tests_params_anchor
  ensure:
    <<: *set_failed

- name: mpp_resource_group_centos6
  plan:
  - *ccp_jitter_delay
  - aggregate:
    - get: gpdb_src
      passed: [gate_mpp_start]
    - get: bin_gpdb
      resource: bin_gpdb_centos6
      passed: [gate_mpp_start]
      trigger: [[ test_trigger ]]
    - get: ccp_src
    - get: centos-gpdb-dev-6
    - get: binary_swap_gpdb
      resource: binary_swap_gpdb_centos6
      passed: [gate_mpp_start]
      trigger: [[ test_trigger ]]
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
        instance_type: n1-standard-2
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
    input_mapping:
      gpdb_binary: bin_gpdb
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: run_tests
    file: gpdb_src/concourse/tasks/ic_gpdb_resgroup.yml
    image: centos-gpdb-dev-6
    params:
      TEST_OS: centos6
    on_success:
      <<: *ccp_destroy
  ensure:
    <<: *set_failed

- name: mpp_resource_group_centos7
  plan:
  - *ccp_jitter_delay
  - aggregate:
    - get: gpdb_src
      passed: [gate_mpp_start]
    - get: bin_gpdb
      resource: bin_gpdb_centos7
      passed: [gate_mpp_start]
      trigger: [[ test_trigger ]]
    - get: ccp_src
    - get: centos-gpdb-dev-7
    - get: binary_swap_gpdb
      resource: binary_swap_gpdb_centos6
      passed: [gate_mpp_start]
      trigger: [[ test_trigger ]]
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
        PLATFORM: centos7
        instance_type: n1-standard-2
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
      PLATFORM: centos7
    input_mapping:
      gpdb_binary: bin_gpdb
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: run_tests
    file: gpdb_src/concourse/tasks/ic_gpdb_resgroup.yml
    image: centos-gpdb-dev-7
    params:
      TEST_OS: centos7
    on_success:
      <<: *ccp_destroy
  ensure:
    <<: *set_failed

- name: gate_mpp_end
  plan:
  - aggregate:
    - get: gpdb_src
      passed:
        - mpp_interconnect
        - mpp_resource_group_centos6
        - mpp_resource_group_centos7
      trigger: true
    - get: bin_gpdb_centos6
      passed:
        - mpp_interconnect
        - mpp_resource_group_centos6
    - get: bin_gpdb_centos7
      passed:
        - mpp_resource_group_centos7

{% endif %}
{% if "MM" in test_sections %}
## ======================================================================
##  __  __ __  __
## |  \/  |  \/  |
## | |\/| | |\/| |
## | |  | | |  | |
## |_|  |_|_|  |_|
## ======================================================================

- name: gate_mm_start
  plan:
{% if stagger_sections %}
  # stagger starts on prod pipelines
  - task: sleep_before_starting
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      run:
        path: 'sh'
        args: ['-c', 'sleep `expr 3 \* {{group_start_delay}} + 1 + $RANDOM % {{group_delay_jitter}}`']
{% endif %}
  - aggregate:
    - get: gpdb_src
      passed:
      - gate_compile_end
      trigger: true
    - get: bin_gpdb_centos6
      passed:
      - gate_compile_end
    - get: bin_gpdb_centos7
      passed:
      - gate_compile_end
    - get: bin_gpdb_sles11
      passed:
      - gate_compile_end

{% for test_name in MM_1_suites %}
- name: MM_[[ test_name ]]
  plan:
  - *ccp_jitter_delay
  - aggregate:
    - get: gpdb_src
      params:
        submodules:
        - gpMgmt/bin/pythonSrc/ext
      passed: [gate_mm_start]
    - get: gpdb_binary
      resource: bin_gpdb_centos6
      passed: [gate_mm_start]
      trigger: [[ test_trigger ]]
    - get: ccp_src
    - get: centos-gpdb-dev-6
    - get: binary_swap_gpdb
      passed: [compile_gpdb_binary_swap_centos6]
      resource: binary_swap_gpdb_centos6
      trigger: [[ test_trigger ]]
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: run_tests
    file: gpdb_src/concourse/tasks/run_behave.yml
    image: centos-gpdb-dev-6
    params:
      BEHAVE_FLAGS: --tags=[[ test_name ]]
    on_success:
      <<: *ccp_destroy
  ensure:
    <<: *set_failed

{% endfor %}
- name: MM_gppkg
  plan:
  - *ccp_jitter_delay
  - aggregate:
    - get: gpdb_src
      params:
        submodules:
        - gpMgmt/bin/pythonSrc/ext
      passed: [gate_mm_start]
    - get: gpdb_binary
      resource: bin_gpdb_centos6
      passed: [gate_mm_start]
      trigger: [[ test_trigger ]]
    - get: ccp_src
    - get: centos-gpdb-dev-6
    - get: binary_swap_gpdb
      passed: [compile_gpdb_binary_swap_centos6]
      resource: binary_swap_gpdb_centos6
      trigger: [[ test_trigger ]]
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: setup_gppkg_second_install
    file: gpdb_src/concourse/tasks/gppkg_behave.yml
    params:
      SECOND_BINARY_INSTALL_LOCATION: /tmp/gppkg_migrate
  - task: run_tests
    file: gpdb_src/concourse/tasks/run_behave.yml
    image: centos-gpdb-dev-6
    params:
      BEHAVE_FLAGS: --tags=gppkg
    on_success:
      <<: *ccp_destroy
  ensure:
    <<: *set_failed

- name: MM_gpcheck
  plan:
  - aggregate: &gets_for_behave
    - get: gpdb_src
      params:
        submodules:
        - gpMgmt/bin/pythonSrc/ext
      passed: [gate_mm_start]
    - get: bin_gpdb
      resource: bin_gpdb_centos6
      passed: [gate_mm_start]
      trigger: [[ test_trigger ]]
    - get: centos-gpdb-dev-6
  - task: gpcheck_as_gpadmin
    file: gpdb_src/concourse/tasks/behave_gpdb.yml
    image: centos-gpdb-dev-6
    params:
      BEHAVE_TAGS: gpcheck_as_gpadmin
      GPCHECK_SETUP: true

- name: MM_gpexpand
  plan:
  - aggregate:
    - get: gpdb_src
      params:
        submodules:
        - gpMgmt/bin/pythonSrc/ext
      passed: [gate_mm_start]
    - get: gpdb_binary
      resource: bin_gpdb_centos6
      passed: [gate_mm_start]
      trigger: [[ test_trigger ]]
    - get: ccp_src
    - get: centos-gpdb-dev-6
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
        number_of_nodes: 5
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
  - task: pre_run_test_setup
    file: gpdb_src/concourse/tasks/setup_for_gpexpand_to_make_new_gpdb.yml
    image: centos-gpdb-dev-6
  - task: run_tests
    file: gpdb_src/concourse/tasks/run_behave.yml
    params:
      BEHAVE_FLAGS: --tags=gpexpand
    image: centos-gpdb-dev-6
    on_success:
      <<: *ccp_destroy
  ensure:
    <<: *set_failed

{% for test_name in MM_2_suites %}
- name: MM_[[ test_name ]]
  plan:
  - aggregate: *gets_for_behave
  - task: [[ test_name ]]
    file: gpdb_src/concourse/tasks/behave_gpdb.yml
    image: centos-gpdb-dev-6
    params:
      BEHAVE_TAGS: [[ test_name ]]

{% endfor %}
- name: MM_pt-rebuild
  plan:
  - aggregate: *gets_for_behave
  - aggregate:
    - task: persistent_table_rebuild
      file: gpdb_src/concourse/tasks/behave_gpdb.yml
      image: centos-gpdb-dev-6
      params:
        BEHAVE_TAGS: persistent_rebuild
    - task: persistent_table_rebuild_crash_recovery
      file: gpdb_src/concourse/tasks/tinc_gpdb.yml
      image: centos-gpdb-dev-6
      params:
        MAKE_TEST_COMMAND: persistent_table_rebuild
        TEST_OS: centos
        CONFIGURE_FLAGS: {{configure_flags}}

- name: MU_check_centos
  plan:
  - aggregate:
    - get: gpdb_src
      passed: [gate_mm_start]
    - get: bin_gpdb
      resource: bin_gpdb_centos6
      passed: [gate_mm_start]
      trigger: [[ test_trigger ]]
    - get: centos-gpdb-dev-6
  - task: MU_check_centos
    file: gpdb_src/concourse/tasks/gpMgmt_check_gpdb.yml
    image: centos-gpdb-dev-6
    params:
      TEST_OS: centos

- name: MM_gpaddmirrors
  plan:
  - aggregate:
    - get: gpdb_src
      params:
        submodules:
        - gpMgmt/bin/pythonSrc/ext
      passed: [gate_mm_start]
    - get: gpdb_binary
      resource: bin_gpdb_centos6
      passed: [gate_mm_start]
      trigger: [[ test_trigger ]]
    - get: ccp_src
    - get: centos-gpdb-dev-6
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
        number_of_nodes: 4
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: run_tests
    file: gpdb_src/concourse/tasks/run_behave.yml
    image: centos-gpdb-dev-6
    params:
      BEHAVE_FLAGS: --tags=gpaddmirrors
    on_success:
      <<: *ccp_destroy
  ensure:
    <<: *set_failed

- name: gate_mm_end
  plan:
  - aggregate:
    - get: gpdb_src
      passed: &gate_mm_end_passed
{% for test_name in MM_1_suites +
                    MM_2_suites %}
      - MM_[[ test_name ]]
{% endfor %}
      - MM_gppkg
      - MM_gpcheck
      - MM_gpexpand
      - MM_pt-rebuild
      - MU_check_centos
      trigger: true
    - get: bin_gpdb_centos6
      passed: *gate_mm_end_passed

{% endif %}
{% if "DPM" in test_sections %}
## ======================================================================
##  ____  ____  __  __
## |  _ \|  _ \|  \/  |
## | | | | |_) | |\/| |
## | |_| |  __/| |  | |
## |____/|_|   |_|  |_|
## ======================================================================

- name: gate_dpm_start
  plan:
{% if stagger_sections %}
  # stagger starts on prod pipelines
  - task: sleep_before_starting
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      run:
        path: 'sh'
        args: ['-c', 'sleep `expr 4 \* {{group_start_delay}} + 1 + $RANDOM % {{group_delay_jitter}}`']
{% endif %}
  - aggregate:
    - get: gpdb_src
      passed:
      - gate_compile_end
      trigger: true
    - get: bin_gpdb_centos6
      passed:
      - gate_compile_end

- name: DPM_backup-restore
  plan:
  - *ccp_jitter_delay
  - aggregate:
    - get: gpdb_src
      params:
        submodules:
        - gpMgmt/bin/pythonSrc/ext
      passed: [gate_dpm_start]
    - get: gpdb_binary
      resource: bin_gpdb_centos6
      passed: [gate_dpm_start]
      trigger: [[ test_trigger ]]
    - get: ccp_src
    - get: centos-gpdb-dev-6
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: run_tests
    file: gpdb_src/concourse/tasks/run_behave.yml
    image: centos-gpdb-dev-6
    params:
      BEHAVE_FLAGS: --tags=backups,backup_and_restore_backups,backup_and_restore_restores,restores --tags=-nbuonly --tags=-ddonly
    on_success:
      <<: *ccp_destroy
  ensure:
    <<: *set_failed

- name: DPM_backup-restore_ddboost_part1
  plan:
  - get: nightly-trigger
    trigger: [[ test_trigger ]]
  - *ccp_jitter_delay
  - aggregate:
    - get: ccp_src
      tags: ["ddboost"]
    - get: gpdb_src
      tags: ["ddboost"]
      passed: [gate_dpm_start]
    - get: gpdb_binary
      tags: ["ddboost"]
      resource: bin_gpdb_centos6
      passed: [gate_dpm_start]
    - get: centos-gpdb-dev-6
      tags: ["ddboost"]
    - get: ddboost_rpm
      tags: ["ddboost"]
  - put: terraform_for_dpm
    params:
      <<: *ccp_default_params
      terraform_source: ccp_src/aws/
      vars:
        <<: *ccp_aws_default_vars
    tags: ["ddboost"]
  - task: gen_cluster
    input_mapping:
      terraform: terraform_for_dpm
    tags: ["ddboost"]
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_aws_gen_cluster_default_params
    on_failure:
      <<: *dpm_ccp_destroy
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
    tags: ["ddboost"]
  - task: ddboost_pre_test_setup
    tags: ["ddboost"]
    config:
      platform: linux
      inputs:
       - name: ccp_src
       - name: gpdb_src
       - name: cluster_env_files
       - name: ddboost_rpm
      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/ccp
          tag: '7'
      run:
        path: bash
        args:
        - -c
        - |
          set -ex
          ccp_src/scripts/setup_ssh_to_cluster.sh
          scp cluster_env_files/terraform/name mdw:/tmp/terraform_name
          scp ddboost_rpm/compat-libstdc-33-3.2.3-69.el6.x86_64.rpm mdw:/tmp/compat-libstdc-33-3.2.3-69.el6.x86_64.rpm
          scp ddboost_rpm/compat-libstdc-33-3.2.3-69.el6.x86_64.rpm sdw1:/tmp/compat-libstdc-33-3.2.3-69.el6.x86_64.rpm
          export DD_SOURCE_HOST={{datadomain_source_host}}; export DD_DEST_HOST={{datadomain_dest_host}};
          source gpdb_src/concourse/scripts/backup_utils.sh; setup_ddboost
    on_failure:
      <<: *dpm_ccp_destroy
  - task: run_tests
    tags: ["ddboost"]
    file: gpdb_src/concourse/tasks/run_behave.yml
    image: centos-gpdb-dev-6
    params:
      BEHAVE_FLAGS: --tags=ddboostsetup,ddpartI
      CUSTOM_ENV: export DD_SOURCE_HOST={{datadomain_source_host}}; export DD_DEST_HOST={{datadomain_dest_host}}; export DD_USER={{datadomain_user}}; export DD_PASSWORD={{datadomain_password}};
    on_failure:
      <<: *dpm_debug_sleep
  ensure:
    <<: *dpm_ccp_destroy

- name: DPM_backup-restore_ddboost_part2
  plan:
  - get: nightly-trigger
    trigger: [[ test_trigger ]]
  - *ccp_jitter_delay
  - aggregate:
    - get: ccp_src
      tags: ["ddboost"]
    - get: gpdb_src
      tags: ["ddboost"]
      passed: [gate_dpm_start]
    - get: gpdb_binary
      tags: ["ddboost"]
      resource: bin_gpdb_centos6
      passed: [gate_dpm_start]
    - get: centos-gpdb-dev-6
      tags: ["ddboost"]
    - get: ddboost_rpm
      tags: ["ddboost"]
  - put: terraform_for_dpm
    params:
      <<: *ccp_default_params
      terraform_source: ccp_src/aws/
      vars:
        <<: *ccp_aws_default_vars
    tags: ["ddboost"]
  - task: gen_cluster
    input_mapping:
      terraform: terraform_for_dpm
    tags: ["ddboost"]
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_aws_gen_cluster_default_params
    on_failure:
      <<: *dpm_ccp_destroy
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
    tags: ["ddboost"]
  - task: ddboost_pre_test_setup
    tags: ["ddboost"]
    config:
      platform: linux
      inputs:
       - name: ccp_src
       - name: gpdb_src
       - name: cluster_env_files
       - name: ddboost_rpm
      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/ccp
          tag: '7'
      run:
        path: bash
        args:
        - -c
        - |
          set -ex
          ccp_src/scripts/setup_ssh_to_cluster.sh
          scp cluster_env_files/terraform/name mdw:/tmp/terraform_name
          scp ddboost_rpm/compat-libstdc-33-3.2.3-69.el6.x86_64.rpm mdw:/tmp/compat-libstdc-33-3.2.3-69.el6.x86_64.rpm
          scp ddboost_rpm/compat-libstdc-33-3.2.3-69.el6.x86_64.rpm sdw1:/tmp/compat-libstdc-33-3.2.3-69.el6.x86_64.rpm
          export DD_SOURCE_HOST={{datadomain_source_host}}; export DD_DEST_HOST={{datadomain_dest_host}};
          source gpdb_src/concourse/scripts/backup_utils.sh; setup_ddboost
    on_failure:
      <<: *dpm_ccp_destroy
  - task: run_tests
    tags: ["ddboost"]
    file: gpdb_src/concourse/tasks/run_behave.yml
    image: centos-gpdb-dev-6
    params:
      BEHAVE_FLAGS: --tags=ddboostsetup,ddpartII
      CUSTOM_ENV: export DD_SOURCE_HOST={{datadomain_source_host}}; export DD_DEST_HOST={{datadomain_dest_host}}; export DD_USER={{datadomain_user}}; export DD_PASSWORD={{datadomain_password}};
    on_failure:
      <<: *dpm_debug_sleep
  ensure:
    <<: *dpm_ccp_destroy

- name: DPM_backup-restore_ddboost_part3
  plan:
  - get: nightly-trigger
    trigger: [[ test_trigger ]]
  - *ccp_jitter_delay
  - aggregate:
    - get: ccp_src
      tags: ["ddboost"]
    - get: gpdb_src
      tags: ["ddboost"]
      passed: [gate_dpm_start]
    - get: gpdb_binary
      tags: ["ddboost"]
      resource: bin_gpdb_centos6
      passed: [gate_dpm_start]
    - get: centos-gpdb-dev-6
      tags: ["ddboost"]
    - get: ddboost_rpm
      tags: ["ddboost"]
  - put: terraform_for_dpm
    params:
      <<: *ccp_default_params
      terraform_source: ccp_src/aws/
      vars:
        <<: *ccp_aws_default_vars
    tags: ["ddboost"]
  - task: gen_cluster
    input_mapping:
      terraform: terraform_for_dpm
    tags: ["ddboost"]
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_aws_gen_cluster_default_params
    on_failure:
      <<: *dpm_ccp_destroy
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
    tags: ["ddboost"]
  - task: ddboost_pre_test_setup
    tags: ["ddboost"]
    config:
      platform: linux
      inputs:
       - name: ccp_src
       - name: gpdb_src
       - name: cluster_env_files
       - name: ddboost_rpm
      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/ccp
          tag: '7'
      run:
        path: bash
        args:
        - -c
        - |
          set -ex
          ccp_src/scripts/setup_ssh_to_cluster.sh
          scp cluster_env_files/terraform/name mdw:/tmp/terraform_name
          scp ddboost_rpm/compat-libstdc-33-3.2.3-69.el6.x86_64.rpm mdw:/tmp/compat-libstdc-33-3.2.3-69.el6.x86_64.rpm
          scp ddboost_rpm/compat-libstdc-33-3.2.3-69.el6.x86_64.rpm sdw1:/tmp/compat-libstdc-33-3.2.3-69.el6.x86_64.rpm
          export DD_SOURCE_HOST={{datadomain_source_host}}; export DD_DEST_HOST={{datadomain_dest_host}};
          source gpdb_src/concourse/scripts/backup_utils.sh; setup_ddboost
    on_failure:
      <<: *dpm_ccp_destroy
  - task: run_tests
    tags: ["ddboost"]
    file: gpdb_src/concourse/tasks/run_behave.yml
    image: centos-gpdb-dev-6
    params:
      BEHAVE_FLAGS: --tags=ddboostsetup,ddpartIII
      CUSTOM_ENV: export DD_SOURCE_HOST={{datadomain_source_host}}; export DD_DEST_HOST={{datadomain_dest_host}}; export DD_USER={{datadomain_user}}; export DD_PASSWORD={{datadomain_password}};
    on_failure:
      <<: *dpm_debug_sleep
  ensure:
    <<: *dpm_ccp_destroy

- name: DPM_backup-restore_netbackup_part1
  plan:
  - get: nightly-trigger
    tags: ["netbackup"]
    trigger: [[ test_trigger ]]
  - *ccp_jitter_delay
  - aggregate:
    - get: ccp_src
      tags: ["netbackup"]
    - get: gpdb_src
      tags: ["netbackup"]
      passed: [gate_dpm_start]
    - get: gpdb_binary
      tags: ["netbackup"]
      resource: bin_gpdb_centos6
      passed: [gate_dpm_start]
    - get: centos-gpdb-dev-6
      tags: ["netbackup"]
    - get: netbackup_installer
      tags: ["netbackup"]
      resource: netbackup-client-installer
  - put: terraform_for_dpm
    params:
      <<: *ccp_default_params
      terraform_source: ccp_src/aws/
      vars:
        <<: *ccp_aws_default_vars
    tags: ["netbackup"]
  - task: gen_cluster
    input_mapping:
      terraform: terraform_for_dpm
    tags: ["netbackup"]
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_aws_gen_cluster_default_params
    on_failure:
      <<: *dpm_ccp_destroy
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
    tags: ["netbackup"]
  - task: netbackup_pre_test_setup
    tags: ["netbackup"]
    file: gpdb_src/concourse/tasks/setup_netbackup.yml
    image: centos-gpdb-dev-6
    params:
      CUSTOM_ENV: export NETBACKUP_SERVER={{netbackup_host}}; export NETBACKUP_KEY={{netbackup_key}};
  - task: run_tests
    tags: ["netbackup"]
    file: gpdb_src/concourse/tasks/run_behave.yml
    image: centos-gpdb-dev-6
    params:
      BEHAVE_FLAGS: --tags=nbusetup77,nbupartI
      CUSTOM_ENV: export NETBACKUP_SERVER={{netbackup_host}};
    on_failure:
      <<: *dpm_debug_sleep
  ensure:
    <<: *dpm_ccp_destroy

- name: DPM_backup-restore_netbackup_part2
  plan:
  - get: nightly-trigger
    tags: ["netbackup"]
    trigger: [[ test_trigger ]]
  - *ccp_jitter_delay
  - aggregate:
    - get: ccp_src
      tags: ["netbackup"]
    - get: gpdb_src
      tags: ["netbackup"]
      passed: [gate_dpm_start]
    - get: gpdb_binary
      tags: ["netbackup"]
      resource: bin_gpdb_centos6
      passed: [gate_dpm_start]
    - get: centos-gpdb-dev-6
      tags: ["netbackup"]
    - get: netbackup_installer
      tags: ["netbackup"]
      resource: netbackup-client-installer
  - put: terraform_for_dpm
    params:
      <<: *ccp_default_params
      terraform_source: ccp_src/aws/
      vars:
        <<: *ccp_aws_default_vars
    tags: ["netbackup"]
  - task: gen_cluster
    input_mapping:
      terraform: terraform_for_dpm
    tags: ["netbackup"]
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_aws_gen_cluster_default_params
    on_failure:
      <<: *dpm_ccp_destroy
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
    tags: ["netbackup"]
  - task: netbackup_pre_test_setup
    tags: ["netbackup"]
    file: gpdb_src/concourse/tasks/setup_netbackup.yml
    image: centos-gpdb-dev-6
    params:
      CUSTOM_ENV: export NETBACKUP_SERVER={{netbackup_host}}; export NETBACKUP_KEY={{netbackup_key}};
  - task: run_tests
    tags: ["netbackup"]
    file: gpdb_src/concourse/tasks/run_behave.yml
    image: centos-gpdb-dev-6
    params:
      BEHAVE_FLAGS: --tags=nbusetup77,nbupartII
      CUSTOM_ENV: export NETBACKUP_SERVER={{netbackup_host}};
    on_failure:
      <<: *dpm_debug_sleep
  ensure:
    <<: *dpm_ccp_destroy

- name: DPM_backup-restore_netbackup_part3
  plan:
  - get: nightly-trigger
    tags: ["netbackup"]
    trigger: [[ test_trigger ]]
  - *ccp_jitter_delay
  - aggregate:
    - get: ccp_src
      tags: ["netbackup"]
    - get: gpdb_src
      tags: ["netbackup"]
      passed: [gate_dpm_start]
    - get: gpdb_binary
      tags: ["netbackup"]
      resource: bin_gpdb_centos6
      passed: [gate_dpm_start]
    - get: centos-gpdb-dev-6
      tags: ["netbackup"]
    - get: netbackup_installer
      tags: ["netbackup"]
      resource: netbackup-client-installer
  - put: terraform_for_dpm
    params:
      <<: *ccp_default_params
      terraform_source: ccp_src/aws/
      vars:
        <<: *ccp_aws_default_vars
    tags: ["netbackup"]
  - task: gen_cluster
    input_mapping:
      terraform: terraform_for_dpm
    tags: ["netbackup"]
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_aws_gen_cluster_default_params
    on_failure:
      <<: *dpm_ccp_destroy
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
    tags: ["netbackup"]
  - task: netbackup_pre_test_setup
    tags: ["netbackup"]
    file: gpdb_src/concourse/tasks/setup_netbackup.yml
    image: centos-gpdb-dev-6
    params:
      CUSTOM_ENV: export NETBACKUP_SERVER={{netbackup_host}}; export NETBACKUP_KEY={{netbackup_key}};
  - task: run_tests
    tags: ["netbackup"]
    file: gpdb_src/concourse/tasks/run_behave.yml
    image: centos-gpdb-dev-6
    params:
      BEHAVE_FLAGS: --tags=nbusetup77,nbupartIII
      CUSTOM_ENV: export NETBACKUP_SERVER={{netbackup_host}};
    on_failure:
      <<: *dpm_debug_sleep
  ensure:
    <<: *dpm_ccp_destroy

- name: DPM_backup_43_restore_5
  plan:
  - *ccp_jitter_delay
  - aggregate:
    - get: gpdb_src
      params:
        submodules:
        - gpMgmt/bin/pythonSrc/ext
      passed: [gate_dpm_start]
    - get: gpdb_binary
      resource: bin_gpdb_centos6
      passed: [gate_dpm_start]
      trigger: [[ test_trigger ]]
    - get: gpdb4_binary
      resource: bin_gpdb4_centos6
    - get: ccp_src
    - get: centos-gpdb-dev-6
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
  - task: setup_gpdb4
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
    input_mapping:
      gpdb_binary: gpdb4_binary
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: run_backup_tests
    file: gpdb_src/concourse/tasks/run_behave.yml
    image: centos-gpdb-dev-6
    params:
      BEHAVE_FLAGS: --tags=backup_and_restore_backups --tags=-nbuonly --tags=-ddonly --tags=-skip_for_gpdb_43
  - task: setup_gpdb5
    file: gpdb_src/concourse/tasks/setup_new_gpdb_for_backup_restore.yml
    params:
      <<: *ccp_gen_cluster_default_params
  - task: run_restore_tests
    file: gpdb_src/concourse/tasks/run_behave.yml
    image: centos-gpdb-dev-6
    params:
      BEHAVE_FLAGS: --tags=backup_and_restore_restores --tags=-nbuonly --tags=-ddonly --tags=-skip_for_gpdb_43
    on_success:
      <<: *ccp_destroy
  ensure:
    <<: *set_failed

- name: gptransfer-43x-to-5x
  plan:
  - *ccp_jitter_delay
  - aggregate:
    - get: gpdb_src
      passed: [gate_dpm_start]
    - get: gpdb_binary
      resource: bin_gpdb_centos6
      passed: [gate_dpm_start]
      trigger: [[ test_trigger ]]
    - get: gpdb4_binary
      resource: bin_gpdb4_centos6
    - get: ccp_src
    - get: centos-gpdb-dev-6
  # The separate clusters can be created in parallel with the aggregate and do blocks
  #  The terraform put and gen cluster that correspond must still happen serially
  - aggregate:
    - do:
      - put: terraform
        params:
          <<: *ccp_default_params
          vars:
            <<: *ccp_default_vars
            instance_type: n1-standard-2
      - task: gen_cluster1
        file: ccp_src/ci/tasks/gen_cluster.yml
        params:
          <<: *ccp_gen_cluster_default_params
      - task: gpinitsystem
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: pivotaldata/ccp
              tag: "7"
          inputs:
          - name: terraform
          - name: ccp_src
          - name: cluster_env_files
          run:
            path: ccp_src/scripts/gpinitsystem.sh
    - do:
      - put: terraform2
        params:
          <<: *ccp_default_params
          vars:
            <<: *ccp_default_vars
            instance_type: n1-standard-2
            cluster_suffix: "-2"
      - task: gen_cluster2
        file: ccp_src/ci/tasks/gen_cluster.yml
        params:
          <<: *ccp_gen_cluster_default_params
        input_mapping:
          terraform: terraform2
          gpdb_binary: gpdb4_binary
        output_mapping:
          cluster_env_files: cluster_env_files2
      - task: gpinitsystem
        input_mapping:
          terraform: terraform2
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: pivotaldata/ccp
              tag: "7"
          inputs:
          - name: terraform
          - name: ccp_src
          - name: cluster_env_files2
            path: cluster_env_files
          run:
            path: ccp_src/scripts/gpinitsystem.sh
  - task: gptransfer_pre_test_setup
    config:
      platform: linux
      inputs:
        - name: cluster_env_files
        - name: cluster_env_files2
        - name: ccp_src
        - name: gpdb_src
      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/ccp
          tag: '7'
      run:
        path: sh
        args:
        - -exc
        - |
          source gpdb_src/concourse/scripts/transfer_utils.sh; setup_gptransfer
  - task: run_gptransfer_tests
    file: gpdb_src/concourse/tasks/run_behave.yml
    image: centos-gpdb-dev-6
    params:
      BEHAVE_FLAGS: --tags=gptransfer --tags=-skip_source_43
      CUSTOM_ENV: export GPTRANSFER_DEST_HOST=mdw; export GPTRANSFER_DEST_PORT=5432; export GPTRANSFER_DEST_USER=gpadmin; export GPTRANSFER_MAP_FILE=/tmp/source_map_file; export GPTRANSFER_SOURCE_HOST=mdw-2; export GPTRANSFER_SOURCE_PORT=5432; export GPTRANSFER_SOURCE_USER=gpadmin;
    on_success:
      <<: *ccp_destroy_two_clusters
  ensure:
    <<: *set_failed_two_clusters

- name: gptransfer-5x-to-5x
  plan:
  - *ccp_jitter_delay
  - aggregate:
    - get: gpdb_src
      passed: [gate_dpm_start]
    - get: gpdb_binary
      resource: bin_gpdb_centos6
      passed: [gate_dpm_start]
      trigger: [[ test_trigger ]]
    - get: ccp_src
    - get: centos-gpdb-dev-6
  # The separate clusters can be created in parallel with the aggregate and do blocks
  #  The terraform put and gen cluster that correspond must still happen serially
  - aggregate:
    - do:
      - put: terraform
        params:
          <<: *ccp_default_params
          vars:
            <<: *ccp_default_vars
            instance_type: n1-standard-2
      - task: gen_cluster1
        file: ccp_src/ci/tasks/gen_cluster.yml
        params:
          <<: *ccp_gen_cluster_default_params
      - task: gpinitsystem
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: pivotaldata/ccp
              tag: "7"
          inputs:
          - name: terraform
          - name: ccp_src
          - name: cluster_env_files
          run:
            path: ccp_src/scripts/gpinitsystem.sh
    - do:
      - put: terraform2
        params:
          <<: *ccp_default_params
          vars:
            <<: *ccp_default_vars
            instance_type: n1-standard-2
            cluster_suffix: "-2"
      - task: gen_cluster2
        file: ccp_src/ci/tasks/gen_cluster.yml
        params:
          <<: *ccp_gen_cluster_default_params
        input_mapping:
          terraform: terraform2
        output_mapping:
          cluster_env_files: cluster_env_files2
      - task: gpinitsystem
        input_mapping:
          terraform: terraform2
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: pivotaldata/ccp
              tag: "7"
          inputs:
          - name: terraform
          - name: ccp_src
          - name: cluster_env_files2
            path: cluster_env_files
          run:
            path: ccp_src/scripts/gpinitsystem.sh
  - task: gptransfer_pre_test_setup
    config:
      platform: linux
      inputs:
        - name: cluster_env_files
        - name: cluster_env_files2
        - name: ccp_src
        - name: gpdb_src
      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/ccp
          tag: '7'
      run:
        path: sh
        args:
        - -exc
        - |
          source gpdb_src/concourse/scripts/transfer_utils.sh; setup_gptransfer
  - task: run_gptransfer_tests
    file: gpdb_src/concourse/tasks/run_behave.yml
    image: centos-gpdb-dev-6
    params:
      BEHAVE_FLAGS: --tags=gptransfer --tags=-skip_source_5
      CUSTOM_ENV: export GPTRANSFER_DEST_HOST=mdw; export GPTRANSFER_DEST_PORT=5432; export GPTRANSFER_DEST_USER=gpadmin; export GPTRANSFER_MAP_FILE=/tmp/source_map_file; export GPTRANSFER_SOURCE_HOST=mdw-2; export GPTRANSFER_SOURCE_PORT=5432; export GPTRANSFER_SOURCE_USER=gpadmin;
    on_success:
      <<: *ccp_destroy_two_clusters
  ensure:
    <<: *set_failed_two_clusters

- name: gate_dpm_end
  plan:
  - aggregate:
    - get: gpdb_src
      trigger: true
      passed:
      - DPM_backup-restore
      - DPM_backup-restore_ddboost_part1
      - DPM_backup-restore_ddboost_part2
      - DPM_backup-restore_ddboost_part3
      # - DPM_backup-restore_netbackup_part1
      # - DPM_backup-restore_netbackup_part2
      # - DPM_backup-restore_netbackup_part3
      - DPM_backup_43_restore_5
      - gptransfer-43x-to-5x
      - gptransfer-5x-to-5x
    - get: bin_gpdb_centos6
      passed:
      - DPM_backup-restore
      - DPM_backup-restore_ddboost_part1
      - DPM_backup-restore_ddboost_part2
      - DPM_backup-restore_ddboost_part3
      # - DPM_backup-restore_netbackup_part1
      # - DPM_backup-restore_netbackup_part2
      # - DPM_backup-restore_netbackup_part3
      - DPM_backup_43_restore_5
      - gptransfer-43x-to-5x
      - gptransfer-5x-to-5x

{% endif %}
{% if "UD" in test_sections %}
## ======================================================================
##  _   _ ____
## | | | |  _ \
## | | | | | | |
## | |_| | |_| |
##  \___/|____/
## ======================================================================

- name: gate_ud_start
  plan:
{% if stagger_sections %}
  # stagger starts on prod pipelines
  - task: sleep_before_starting
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      run:
        path: 'sh'
        args: ['-c', 'sleep `expr 5 \* {{group_start_delay}} + 1 + $RANDOM % {{group_delay_jitter}}`']
{% endif %}
  - aggregate:
    - get: gpdb_src
      passed:
      - gate_compile_end
      trigger: true
    - get: bin_gpdb_centos6
      passed:
      - gate_compile_end
    - get: bin_gpdb_centos7
      passed:
      - gate_compile_end

- name: regression_tests_gphdfs_hadoop_centos
  plan:
  - aggregate:
    - get: gpdb_src
      passed: [gate_ud_start]
    - get: bin_gpdb
      passed: [gate_ud_start]
      trigger: [[ test_trigger ]]
      resource: bin_gpdb_centos6
    - get: centos-gpdb-dev-6
  - task: regression_tests_gphdfs
    file: gpdb_src/concourse/tasks/regression_tests_gphdfs.yml
    image: centos-gpdb-dev-6
    params:
      TARGET_OS: centos
      TARGET_OS_VERSION: 6

- name: regression_tests_gphdfs_mapr_centos
  ensure:
    <<: *set_failed
  on_success:
    <<: *ccp_destroy
  plan:
  - aggregate:
    - get: gpdb_src
      passed: [gate_ud_start]
    - get: bin_gpdb
      passed: [gate_ud_start]
      trigger: [[ test_trigger ]]
      resource: bin_gpdb_centos6
    - get: ccp_src
    - get: centos-gpdb-dev-6
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
        number_of_nodes: 1
        PLATFORM: centos7
        instance_type: n1-standard-4
  - task: gen_and_initialize_mapr
    file: gpdb_src/concourse/tasks/gen_mapr.yml
    params:
      <<: *ccp_gen_cluster_default_params
  - task: regression_tests_gphdfs_mapr
    file: gpdb_src/concourse/tasks/regression_tests_gphdfs_mapr.yml
    image: centos-gpdb-dev-6
    params:
      TARGET_OS: centos
      TARGET_OS_VERSION: 6

- name: gate_ud_end
  plan:
  - aggregate:
    - get: gpdb_src
      passed: &gate_ud_end
      - regression_tests_gphdfs_hadoop_centos
      - regression_tests_gphdfs_mapr_centos
      trigger: true
    - get: bin_gpdb_centos6
      passed: *gate_ud_end

{% endif %}
{% if "AA" in test_sections %}
## ======================================================================
##     _        _
##    / \      / \
##   / _ \    / _ \
##  / ___ \  / ___ \
## /_/   \_\/_/   \_\
## ======================================================================

- name: gate_advanced_analytics_start
  plan:
{% if stagger_sections %}
  # stagger starts on prod pipelines
  - task: sleep_before_starting
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      run:
        path: 'sh'
        args: ['-c', 'sleep `expr 6 \* {{group_start_delay}} + 1 + $RANDOM % {{group_delay_jitter}}`']
{% endif %}
  - aggregate:
    - get: gpdb_src
      passed:
      - gate_compile_end
      trigger: true
    - get: bin_gpdb_centos6
      passed:
      - gate_compile_end
    - get: bin_gpdb_centos7
      passed:
      - gate_compile_end

{% for platform in postgis_build_platforms %}
{% set platform_version = '7' if "centos7" in platform else '6' %}
- name: postgis_build_[[ platform ]]
  plan:
  - aggregate:
    - get: postgis_src
    - get: madlib_ci
    - get: gpdb_src
      passed:
      - gate_advanced_analytics_start
    - get: bin_gpdb
      resource: bin_gpdb_[[ platform ]]
      trigger: [[ test_trigger ]]
      passed:
      - gate_advanced_analytics_start
    - get: centos-gpdb-dev-[[ platform_version ]]
    - get: gcc_4.4.2_snowflake
  - aggregate:
    - task: postgis_gpdb_build
      file: madlib_ci/concourse/tasks/build_postgis.yml
      image: centos-gpdb-dev-[[ platform_version ]]
      params:
        TEST_OS: [[ platform ]]
        IVYREPO_HOST: {{ivyrepo_host}}
        IVYREPO_REALM: {{ivyrepo_realm}}
        IVYREPO_USER: {{ivyrepo_user}}
        IVYREPO_PASSWD: {{ivyrepo_passwd}}
  - aggregate:
    - put: postgis_gppkg_[[ platform ]]
      params:
        file: postgis_gppkg/postgis-*.gppkg
{% endfor %}

{% for test_name in aa_Test_suites %}
{% set platform_version = '7' if "centos7" in test_name else '6' %}
{% set orca_state = 'off' if "Planner" in test_name else 'on' %}
- name: MADlib_Test_[[ test_name ]]
  plan:
  - aggregate:
    - get: madlib_ci
    - get: gpdb_src
      passed:
      - gate_advanced_analytics_start
    - get: bin_gpdb
      resource: bin_gpdb_centos[[ platform_version ]]
      trigger: [[ test_trigger ]]
      passed:
      - gate_advanced_analytics_start
    - get: centos-gpdb-dev-[[ platform_version ]]
    - get: madlib_gppkg
  - task: MADlib_Test_gppkg
    file: madlib_ci/concourse/tasks/madlib_test_gppkg.yml
    image: centos-gpdb-dev-[[ platform_version ]]
    params:
      TEST_OS: centos
      ORCA: "[[ orca_state ]]"

- name: Postgis_Test_[[ test_name ]]
  plan:
  - aggregate:
    - get: madlib_ci
    - get: postgis_src
      passed:
      - postgis_build_centos[[ platform_version ]]
    - get: postgis_gppkg
      resource: postgis_gppkg_centos[[ platform_version ]]
      trigger: [[ test_trigger ]]
      passed:
      - postgis_build_centos[[ platform_version ]]
    - get: bin_gpdb
      resource: bin_gpdb_centos[[ platform_version ]]
      trigger: [[ test_trigger ]]
      passed:
      - postgis_build_centos[[ platform_version ]]
    - get: centos-gpdb-dev-[[ platform_version ]]
    - get: gpdb_src
      passed:
      - postgis_build_centos[[ platform_version ]]
    - get: gcc_4.4.2_snowflake
  - task: test_postgis
    file: madlib_ci/concourse/tasks/test_postgis.yml
    image: centos-gpdb-dev-[[ platform_version ]]
    params:
      PGOPTIONS: '-c optimizer=[[ orca_state ]]'
      TEST_OS: centos[[ platform_version ]]
      IVYREPO_HOST: {{ivyrepo_host}}
      IVYREPO_REALM: {{ivyrepo_realm}}
      IVYREPO_USER: {{ivyrepo_user}}
      IVYREPO_PASSWD: {{ivyrepo_passwd}}

{% endfor %}
- name: gate_advanced_analytics_end
  plan:
  - aggregate:
    - get: gpdb_src
      trigger: true
      passed:
{% for test_name in aa_Test_suites %}
{% set platform_version = '7' if "centos7" in test_name else '6' %}
{% set orca_state = 'off' if "Planner" in test_name else 'on' %}
      - MADlib_Test_[[ test_name ]]
      - Postgis_Test_[[ test_name ]]
{% endfor %}
    - get: bin_gpdb_centos6
      passed:
{% for test_name in aa_Test_suites %}
{% if "centos6" in test_name  %}
{% set orca_state = 'off' if "Planner" in test_name else 'on' %}
      - MADlib_Test_[[ test_name ]]
      - Postgis_Test_[[ test_name ]]
{% endif %}
{% endfor %}
    - get: bin_gpdb_centos7
      passed:
{% for test_name in aa_Test_suites %}
{% if "centos7" in test_name  %}
{% set orca_state = 'off' if "Planner" in test_name else 'on' %}
      - MADlib_Test_[[ test_name ]]
      - Postgis_Test_[[ test_name ]]
{% endif %}
{% endfor %}

{% endif %}
{% if "FileRep" in test_sections %}
## ======================================================================
##  _____ _ _      ____
## |  ___(_) | ___|  _ \ ___ _ __
## | |_  | | |/ _ \ |_) / _ \ '_ \
## |  _| | | |  __/  _ <  __/ |_) |
## |_|   |_|_|\___|_| \_\___| .__/
##                          |_|
## ======================================================================

- name: gate_filerep_start
  plan:
{% if stagger_sections %}
  # stagger starts on prod pipelines
  - task: sleep_before_starting
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      run:
        path: 'sh'
        args: ['-c', 'sleep `expr 7 \* {{group_start_delay}} + 1 + $RANDOM % {{group_delay_jitter}}`']
{% endif %}
  - aggregate:
    - get: gpdb_src
      passed:
      - gate_compile_end
      trigger: true
    - get: bin_gpdb_centos6
      passed:
      - gate_compile_end

{% for test_name in cs_filerep_end_to_end_suites %}
- name: cs_[[ test_name ]]
  plan:
  - *ccp_jitter_delay
  - aggregate:
    - get: gpdb_src
      passed: [gate_filerep_start]
    - get: gpdb_binary
      resource: bin_gpdb_centos6
      passed: [gate_filerep_start]
      trigger: [[ test_trigger ]]
    - get: ccp_src
    - get: centos-gpdb-dev-6
  - put: terraform
    params:
      <<: *ccp_default_params
      terraform_source: ccp_src/google-nvme-block-device/
      vars:
        <<: *ccp_default_vars
        instance_type: n1-highmem-4
{% if test_name != 'filerep_end_to_end_full_primary' %}
        number_of_nodes: 1
{% endif %}
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: run_tests
    file: gpdb_src/concourse/tasks/run_tinc.yml
    image: centos-gpdb-dev-6
    params:
      TINC_TARGET: [[ test_name ]]
    on_success:
      <<: *ccp_destroy_nvme
  ensure:
    <<: *set_failed

{% endfor %}
- name: gate_filerep_end
  plan:
  - aggregate:
    - get: gpdb_src
      passed:
{% for test_name in cs_filerep_end_to_end_suites %}
      - cs_[[ test_name ]]
{% endfor %}
      trigger: true
    - get: bin_gpdb_centos6
      passed:
{% for test_name in cs_filerep_end_to_end_suites %}
      - cs_[[ test_name ]]
{% endfor %}

{% endif %}
{% if pipeline_type == "prod" %}
## ======================================================================
##  ____      _
## |  _ \ ___| | ___  __ _ ___  ___
## | |_) / _ \ |/ _ \/ _` / __|/ _ \
## |  _ <  __/ |  __/ (_| \__ \  __/
## |_| \_\___|_|\___|\__,_|___/\___|
## ======================================================================

- name: gate_release_candidate_start
  plan:
  - aggregate:
    - get: gpdb_src
      trigger: true
      passed:
      - compile_gpdb_centos6
      - compile_gpdb_open_source_centos6
      - compile_gpdb_centos7
      - compile_gpdb_sles11
      - compile_gpdb_ubuntu16
      - compile_gpdb_ubuntu16_oss
      - compile_gpdb_windows_cl
      - compile_gpdb_aix7_remote
      - icw_planner_centos6
      - icw_gporca_centos6
      - icw_planner_ictcp_centos6
      - icw_planner_centos7
      - icw_gporca_centos7
      - icw_planner_oracle7
      - icw_gporca_oracle7
      - icw_gporca_sles11
      - icw_planner_ubuntu16
      - icw_planner_ubuntu16_oss
      - icw_gporca_ubuntu16
      - icw_gporca_ubuntu16_oss
      - icw_extensions_gpcloud
      - mpp_resource_group_centos6
      - mpp_resource_group_centos7
      - MU_check_centos
      - MM_gpaddmirrors
      - MM_gpcheck
      - MM_gpexpand
      - DPM_backup-restore
      - MM_gppkg
      - MM_pt-rebuild
      - fts
      - storage
{% for test_name in cs_walrep_suites +
                    cs_pg_twophase_suites +
                    cs_crash_recovery_suite +
                    cs_filerep_end_to_end_suites %}
      - cs_[[ test_name ]]
{% endfor %}
      - QP_memory-accounting
      - regression_tests_gphdfs_hadoop_centos
      - regression_tests_gphdfs_mapr_centos
      - DPM_backup-restore_ddboost_part1
      - DPM_backup-restore_ddboost_part2
      - DPM_backup-restore_ddboost_part3
      # - DPM_backup-restore_netbackup_part1
      # - DPM_backup-restore_netbackup_part2
      # - DPM_backup-restore_netbackup_part3
      - DPM_backup_43_restore_5
{% for test_name in MM_1_suites +
                    MM_2_suites %}
      - MM_[[ test_name ]]
{% endfor %}
      - gptransfer-43x-to-5x
      - gptransfer-5x-to-5x
      - mpp_interconnect
      - QP_optimizer-functional
{% for platform in postgis_build_platforms %}
      - postgis_build_[[ platform ]]
{% endfor %}
{% for test_name in aa_Test_suites %}
{% set platform_version = '7' if "centos7" in test_name else '6' %}
{% set orca_state = 'off' if "Planner" in test_name else 'on' %}
      - MADlib_Test_[[ test_name ]]
      - Postgis_Test_[[ test_name ]]
{% endfor %}
    - get: bin_gpdb_centos6
      trigger: true
      passed:
      - compile_gpdb_centos6
      - gate_icw_end
      - gate_mpp_end
      - gate_advanced_analytics_end
      - gate_cs_end
      - gate_mm_end
      - gate_ud_end
      - gate_dpm_end
      - gate_filerep_end
    - get: bin_gpdb_centos7
      trigger: true
      passed:
      - compile_gpdb_centos7
      - gate_icw_end
      - gate_mpp_end
      - gate_advanced_analytics_end
    - get: bin_gpdb_sles11
      trigger: true
      passed:
      - compile_gpdb_sles11


- name: Release_Candidate
  plan:
  - aggregate:
    - get: gpdb_src
      trigger: true
      passed: [gate_release_candidate_start]
    - get: bin_gpdb_centos6
      trigger: true
      passed: [gate_release_candidate_start]
    - get: bin_gpdb_centos7
      trigger: true
      passed: [gate_release_candidate_start]
    - get: bin_gpdb_sles11
      trigger: true
      passed: [gate_release_candidate_start]
  - task: verify_gpdb_versions
    file: gpdb_src/concourse/tasks/verify_gpdb_versions.yml
  - put: bin_gpdb_centos6_rc
    params:
      file: bin_gpdb_centos6/bin_gpdb.tar.gz
  - put: bin_gpdb_centos7_rc
    params:
      file: bin_gpdb_centos7/bin_gpdb.tar.gz
  - put: bin_gpdb_sles11_rc
    params:
      file: bin_gpdb_sles11/bin_gpdb.tar.gz
{% endif %}
